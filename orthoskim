#!/bin/bash

while getopts ":m:c:t:p:" opt; do
  case $opt in
    m) mode="$OPTARG"
    ;;
    c) config="$OPTARG"
    ;;
    t) target+=("$OPTARG")
    ;;
    p) path="$OPTARG"
    ;;
  esac
done


## Help display of function
if [ "$1" == "-h" ]; then
    ##cat `dirname $0`/README.txt
  echo "Usage: `basename $0` [-h] [-m mode] [-c configfile.txt] [-t target]

____________________________________________________
   ___       _   _          ____  _  ___
' / _ \ _ __| |_| |__   ___/ ___|| |/ (_)_ __ ___  '
'| | | |  __| __|  _ \ / _ \___ \|   /| |  _   _  \'
'| |_| | |  | |_| | | | (_) |__) | . \| | | | | | |'
' \___/|_|   \__|_| |_|\___/____/|_|\_\_|_| |_| |_|'
____________________________________________________


OrthoSkim: in silico gene-capture from whole genome shotgun sequencing
           where:
            -m (mode) perform pipeline according to the chosen mode:
                  - [alignment]
                  - [database] (make a database bank of mitochondrial/chloroplast/nucrdna genes from annotations)
                  - [capture] (capture of genes from non-targeted assemblies directly
                                            with mapping into references using targets (-t)
                  - [contaminant_filtering] (identification and filtering of contaminants in assemblies)
                  - [phyloskim_indexing] (make paramfile files)
                  - [phyloskim_database] (make a database bank of mitochondrial/chloroplast/nucrdna genes from phyloskims annotations)
                  - [phyloskim_stat_chloro] (output summary statistic for chloroplast assemblies)
                  - [phyloskim_stat_rdna] (output summary statistic for rdna assemblies)
                  - [phyloskim_extraction_targeted] (extraction of genes from targeted assemblies directly with
                                          annotations; target: chloroplast,nucrdna)
                  - [SPAdes_assembly] (run SPAdes de novo assembly for each samples)
                  - [SPAdes_reformate] (reformates SPAdes output according to OrthoSkim pipeline)
                  - [stat_assembly] (check assemblies by generating summary statistics)
                  - [stat_capture] (get statistics of gene extraction for targets (-t), possibily to give multiple targets)
                  - [check_taxonomy] (taxonomy check of gene captured from blast to NCBI database)
            -c (config) set the config file
            -t (target) gene type targeted:
                  - [chloroplast] (for [*database*, *phyloskim_extraction_targeted*, *phyloskim_database*] modes. Extract all CDS+tRNA+rRNA genes)
                  - [nucrdna] (for [*database*, *capture*, *phyloskim_extraction_targeted*,*phyloskim_database*] modes. Extract all rRNA and Internal Transcribed Spacer)
                  - [mitochondrion] (for *database* mode)
                  - [nucleus_aa] (*capture*,*stat_capture*)
                  - [nucleus_nt] (*capture*,*stat_capture*)
                  - [busco] (*capture*,*stat_capture*)
                  - [uce] (*capture*,*stat_capture*)
                  - [chloroplast_CDS] (*capture*,*stat_capture*)
                  - [chloroplast_tRNA] (*capture*,*stat_capture*)
                  - [chloroplast_rRNA] (*capture*,*stat_capture*)
                  - [mitochondrion_CDS] (*capture*,*stat_capture*)
                  - [mitochondrion_rRNA] (*capture*,*stat_capture*)
            -p  (path) [only for phyloskims users] give path to indexing file
            "
  exit 0
fi


## OrthoSkim process
source $config
source `dirname $0`/tools.sh

set -e

if [ ${VERBOSE} -eq 1 ]; then
      set -x
fi


echo $'Processing OrthoSkim program\n'
echo "
____________________________________________________
   ___       _   _          ____  _  ___
' / _ \ _ __| |_| |__   ___/ ___|| |/ (_)_ __ ___  '
'| | | |  __| __|  _ \ / _ \___ \|   /| |  _   _  \'
'| |_| | |  | |_| | | | (_) |__) | . \| | | | | | |'
' \___/|_|   \__|_| |_|\___/____/|_|\_\_|_| |_| |_|'
____________________________________________________

"

mkdir -p ${RES}/Assembly/Samples
mkdir -p ${RES}/Extraction

  if [ $mode == 'phyloskim_indexing' ]; then
		echo "INFO: mode=$mode - indexing of annotation files"
    echo "CMD: `dirname $0`/src/Indexing.py -p ${path} -cfind > ${LIST_FILES}"
		`dirname $0`/src/Indexing.py -p ${path} -cfind > ${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0


  elif [ $mode == 'reformate' ] && [ $target=='spades' ]; then
		echo "INFO: mode=$mode - preprocessing of assemblies files from SPAdes"
    mkdir -p ${RES}/Assembly/Samples/unfiltered/
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
      if [ -s ${RES}/Assembly/SPADES/${samplename}/scaffolds.fasta ]; then
        cp ${RES}/Assembly/SPADES/${samplename}/scaffolds.fasta ${RES}/Assembly/Samples/unfiltered/${samplename}.fa
      else
        echo "WARN: $samplename unprocessed"
        continue
      fi
    done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'contaminant_filtering' ]; then
    echo "INFO: mode=$mode - identification and filtering of contaminants in assemblies from rRNA database"
    mkdir -p ${RES}/Assembly/Samples/filtered/
    mkdir -p ${RES}/Assembly/Samples/log/
    echo "*** make BLAST formatted reference database for rRNA sequences ***"
    for seq in `dirname $0`/ressources/rRNA_database/*.fasta;
    do
      ${BLASTDB} -in $seq -dbtype nucl
    done
    echo "*** filtering of taxa assemblies ***"
    while read f;
    do
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/unfiltered/${lib}.fa
      if [ -s $file ]; then
        for seq in `dirname $0`/ressources/rRNA_database/silva-*.fasta;
        do
          echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
          ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
        done
        for seq in `dirname $0`/ressources/rRNA_database/rfam*.fasta;
        do
          echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=100 '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
          ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=100 '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
        done
        for seq in `dirname $0`/ressources/rRNA_database/DBFAM*.fasta;
        do
          echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
          ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
        done
        `dirname $0`/src/SelectContigs_contaminants.py --blast ${RES}/Assembly/Samples/blast_${lib}.out --rank ${TAXONOMIC_PHYLUM_EXPECTED} --taxo `dirname $0`/ressources/rRNA_database_taxonomy.txt > ${RES}/Assembly/Samples/log/bad_${lib}.log
        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a == 0) {print ">"$1"\n"$NF}}' ${RES}/Assembly/Samples/log/bad_${lib}.log - > ${RES}/Assembly/Samples/filtered/${lib}.fa
        rm ${RES}/Assembly/Samples/blast_${lib}.out
        echo ""
        echo "filtering done for $lib"
        echo ""
        # if [ -s ${RES}/Assembly/Samples/filtered/${lib}.fa ]; then
        #   rm $file
        # else
        #   echo "WARN: $lib could not be filtered"
        # fi
      else
        echo "WARN: ${file} does not exist"
        continue
      fi
    done <${LIST_FILES}
    echo "STATUS: done"
    echo ""
    exit 0

	elif [ $mode == 'assembly' ] && [ $target == 'spades' ]; then
		echo "INFO: mode=$mode - SPAdes assembly run"
    mkdir -p ${RES}/Assembly/SPADES
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
			r1=`echo ${f} | awk '{print $2}'`
			r2=`echo ${f} | awk '{print $3}'`
			#outp=`echo ${f} | awk '{print $6}'`
      # if assembly_done existed
      if [ -s ${RES}/assembly_done.log ]; then
        # we checked if sample already in done.log to continue to another sample
        if grep -Fxq "${samplename}" ${RES}/assembly_done.log; then
          echo "WARN: $samplename already processed"
          continue
        else
          echo "${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}"
          # we check if no error on function run
          if ${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}; then
            echo $samplename >> ${RES}/assembly_done.log
          else
            echo $samplename >> ${RES}/assembly_error.log
          fi
        fi
      else
        echo "${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}"
        if ${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}; then
          echo ${samplename} >> ${RES}/assembly_done.log
        else
          echo ${samplename} >> ${RES}/assembly_error.log
        fi
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'capture' ] && [ $target == 'busco' ]; then
		echo "INFO: mode=$mode - Extraction of BUSCO from assemblies"
		mkdir -p ${RES}/Mapping/busco
		echo "*** make DIAMOND formatted reference database ***"
		refdb=${BUSCO_REF/.fasta/}
    echo "CMD: ${DIAMOND} makedb --in ${BUSCO_REF} -d ${refdb}"
		${DIAMOND} makedb --in ${BUSCO_REF} -d ${refdb} --threads ${THREADS}
		echo "*** mapping and extraction of assemblies into reference ***"
		#for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
			lib=`echo ${f} | awk '{print $1}'`
			#lib=`basename $f | perl -pe 's/\.fa//'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/busco_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/busco_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "CMD: ${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q ${file} -o ${RES}/Mapping/busco/matches_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive"
      			${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q ${file} -o ${RES}/Mapping/busco/matches_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive
      			awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/busco/matches_${lib} | sort | uniq > ${RES}/Mapping/busco/hits_${lib}
            if [ -s ${RES}/Mapping/busco/hits_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/busco/hits_${lib} - > ${RES}/Mapping/busco/contigs_hits_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff"
              if ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/busco/contigs_hits_${lib}.fasta ${RES}/Mapping/busco/hits_${lib} ${RES}/Mapping/busco/matches_${lib}
          			echo ${lib} >> ${RES}/busco_done.log
              else
                echo ${lib} >> ${RES}/busco_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${BUSCO_REF} database"
              echo ${lib} >> ${RES}/busco_error.log
              continue
            fi
          fi
        else
          echo "CMD: ${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q ${file} -o ${RES}/Mapping/busco/matches_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive"
    			${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q ${file} -o ${RES}/Mapping/busco/matches_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive
    			awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/busco/matches_${lib} | sort | uniq > ${RES}/Mapping/busco/hits_${lib}
          if [ -s ${RES}/Mapping/busco/hits_${lib} ]; then
            awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/busco/hits_${lib} - > ${RES}/Mapping/busco/contigs_hits_${lib}.fasta
            echo "CMD: ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff"
            if ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff; then
              echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT}"
              `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT}
              rm ${RES}/Mapping/busco/contigs_hits_${lib}.fasta ${RES}/Mapping/busco/hits_${lib} ${RES}/Mapping/busco/matches_${lib}
        			echo ${lib} >> ${RES}/busco_done.log
            else
              echo ${lib} >> ${RES}/busco_error.log
            fi
          else
            echo "WARN: No hits were detected when mapping ${lib} into ${BUSCO_REF} database"
            echo ${lib} >> ${RES}/busco_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/busco_error.log
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'phyloskim_extraction_targeted' ] && [ $target == 'chloroplast' ]; then
		echo "INFO: mode=$mode - Extraction of chloroplastic genes from annotated files"
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
			file=`echo ${f} | awk '{print $4}'`
      cond_count=`grep -c '//' $file`
      cond_circ=`awk '$1 ~ /^ID/ {print}' $file | grep -c "circular"`
      if [ -s ${RES}/chloroplast_done.log ]; then
        if grep -Fxq "${samplename}" ${RES}/chloroplast_done.log; then
          echo "WARN: $samplename already processed"
          continue
        else
          if [ $cond_count==1 ] && [ $cond_circ==1 ]; then
            echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"chloroplast\" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
      			if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "chloroplast" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
              echo $samplename >> ${RES}/chloroplast_done.log
            else
              echo $samplename >> ${RES}/chloroplast_error.log
            fi
          else
            echo $samplename >> ${RES}/chloroplast_error.log
          fi
        fi
      else
        if [ $cond_count==1 ] && [ $cond_circ==1 ]; then
          echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"chloroplast\" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
          if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "chloroplast" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
            echo $samplename >> ${RES}/chloroplast_done.log
          else
            echo $samplename >> ${RES}/chloroplast_error.log
          fi
        else
          echo $samplename >> ${RES}/chloroplast_error.log
        fi
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
		exit 0

	elif [ $mode == 'phyloskim_extraction_targeted' ] && [ $target == 'nucrdna' ]; then
		echo "INFO: mode=$mode - Extraction of nuclear rDNA genes from annotated files"
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
			file=`echo ${f} | awk '{print $4}' | perl -pe 's/.chloro.embl/.rdnanuc.embl/'`
      cond_count=`grep -c '//' $file`
      if [ -s ${RES}/nucrdna_done.log ]; then
        if grep -Fxq "${samplename}" ${RES}/nucrdna_done.log; then
          echo "WARN: $samplename already processed"
          continue
        else
          if [ $cond_count==1 ]; then
            echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"nucrdna\" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
            if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "nucrdna" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
              echo ${samplename} >> ${RES}/nucrdna_done.log
            else
              echo ${samplename} >> ${RES}/nucrdna_error.log
            fi
          else
            echo ${samplename} >> ${RES}/nucrdna_error.log
          fi
        fi
      else
        if [ $cond_count==1 ]; then
          echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"nucrdna\" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
          if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "nucrdna" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
            echo ${samplename} >> ${RES}/nucrdna_done.log
          else
            echo ${samplename} >> ${RES}/nucrdna_error.log
          fi
        else
          echo ${samplename} >> ${RES}/nucrdna_error.log
        fi
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'database' ] && [ $target == 'mitochondrion' ]; then
		echo "INFO: mode=$mode - Creation of mitochondrial database from annotations for CDS, tRNA and rRNA features"
		mkdir -p ${RES}/references/unclean
    echo '*** extraction of all genes from annotations ***'
    echo "CMD: `dirname $0`/src/AnoRef_extraction.py --single -in ${MITO_ANNOTATIONS} -o ${RES}/references/unclean -m mitochondrion -fmt ${MITO_DB_FMT} --codon `dirname $0`/ressources/tRNA_codons.tab"
		`dirname $0`/src/AnoRef_extraction.py --single -in ${MITO_ANNOTATIONS} -o ${RES}/references/unclean -m mitochondrion -fmt ${MITO_DB_FMT} --codon `dirname $0`/ressources/tRNA_codons.tab

		echo '*** alignment of CDS into mito seeds, and extraction of final CDS of reference ***'
		for file in `find ${RES}/references/unclean/mitochondrion_CDS/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_CDS} -g ${RES}/references/tmp.exonerate -m mitochondrion_CDS -o ${RES}/references/clean --threads 1"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_CDS} -g ${RES}/references/tmp.exonerate -m mitochondrion_CDS -o ${RES}/references/clean --threads 1
		done
		cat ${RES}/references/clean/mitochondrion_CDS/*.fa > ${MITO_REF_CDS}
    rm -rf ${RES}/references/unclean/mitochondrion_CDS/
		echo "STATUS: done"

    echo '*** alignment of rRNA into mito seeds, and extraction of final rRNA of reference ***'
		for file in `find ${RES}/references/unclean/mitochondrion_rRNA/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_rRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_rRNA -o ${RES}/references/clean --threads 1"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_rRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_rRNA -o ${RES}/references/clean --threads 1
		done
		cat ${RES}/references/clean/mitochondrion_rRNA/*.fa > ${MITO_REF_rRNA}
    rm -rf ${RES}/references/unclean/mitochondrion_rRNA/
		echo "STATUS: done"
    echo ""

    # echo '*** alignment of tRNA into mito seeds, and extraction of final tRNA of reference ***'
		# for file in `find ${RES}/references/unclean/mitochondrion_tRNA/ -type f -name \*.fa`;
		# do
    #   echo "CMD: ${EXONERATE} -q ${SEEDS_MITO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
		# 	${EXONERATE} -q ${SEEDS_MITO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
    #   echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_tRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_tRNA -o ${RES}/references/clean --threads ${THREADS}"
    #   `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_tRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_tRNA -o ${RES}/references/clean --threads ${THREADS}
		# done
		# cat ${RES}/references/clean/mitochondrion_tRNA/*.fa > ${MITO_REF_tRNA}
		# echo "STATUS: done"

		exit 0

  elif [ $mode == 'database' ] && [ $target == 'nucrdna' ]; then
    echo "INFO: mode=$mode - Creation of nucrdna database from  annotations for rRNA features"
    mkdir -p ${RES}/references/unclean
    echo '*** extraction of all genes from annotations ***'
    echo "CMD: `dirname $0`/src/AnoRef_nucrdna.py --single -in ${NRDNA_ANNOTATIONS} -o ${RES}/references/unclean -m nucrdna -fmt ${NRDNA_DB_FMT}"
    `dirname $0`/src/AnoRef_nucrdna.py --single -in ${NRDNA_ANNOTATIONS} -o ${RES}/references/unclean -m nucrdna -fmt ${NRDNA_DB_FMT}

    echo '*** alignment of rRNA into seeds, and extraction of final reference ***'
    for file in `find ${RES}/references/unclean/nucrdna_rRNA/ -type f -name \*.fa`;
    do
      echo "CMD: ${EXONERATE} --model genome2genome -q ${SEEDS_NRDNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
      ${EXONERATE} --model genome2genome -q ${SEEDS_NRDNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_NRDNA} -g ${RES}/references/tmp.exonerate -m nucrdna_rRNA -o ${RES}/references/clean --threads 1"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_NRDNA} -g ${RES}/references/tmp.exonerate -m nucrdna_rRNA -o ${RES}/references/clean --threads 1
    done

    `dirname $0`/src/rrnITS.py -p ${RES}/references/clean/nucrdna_rRNA -o ${RES}/references/clean/nucrdna_misc_RNA
    `dirname $0`/src/rrnITS_seeds.py -i ${SEEDS_NRDNA}

    cat ${RES}/references/clean/nucrdna_rRNA/*.fa > ${NRDNA_REF}
    cat ${RES}/references/clean/nucrdna_misc_RNA/*.fa >> ${NRDNA_REF}
    rm -rf ${RES}/references/unclean/nucrdna_rRNA/
    echo "STATUS: done"
    echo ""

    exit 0

  elif [ $mode == 'database' ] && [ $target == 'chloroplast' ]; then
		echo "INFO: mode=$mode - Creation of chloroplast database from annotations for CDS, tRNA and rRNA features"
		mkdir -p ${RES}/references/unclean
    echo '*** extraction of all genes from annotations ***'
    echo "CMD: `dirname $0`/src/AnoRef_extraction.py --single -in ${CHLORO_ANNOTATIONS} -o ${RES}/references/unclean -m chloroplast -fmt ${CHLORO_DB_FMT} --codon `dirname $0`/ressources/tRNA_codons.tab"
		`dirname $0`/src/AnoRef_extraction.py --single -in ${CHLORO_ANNOTATIONS} -o ${RES}/references/unclean -m chloroplast -fmt ${CHLORO_DB_FMT} --codon `dirname $0`/ressources/tRNA_codons.tab

		echo '*** alignment of CDS into seeds, and extraction of final CDS of reference ***'
		for file in `find ${RES}/references/unclean/chloroplast_CDS/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_CDS} -g ${RES}/references/tmp.exonerate -m chloroplast_CDS -o ${RES}/references/clean --threads 1"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_CDS} -g ${RES}/references/tmp.exonerate -m chloroplast_CDS -o ${RES}/references/clean --threads 1
		done
		cat ${RES}/references/clean/chloroplast_CDS/*.fa > ${CHLORO_REF_CDS}
    rm -rf ${RES}/references/unclean/chloroplast_CDS/
		echo "STATUS: done"

    echo '*** alignment of rRNA into seeds, and extraction of final rRNA of reference ***'
		for file in `find ${RES}/references/unclean/chloroplast_rRNA/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_rRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_rRNA -o ${RES}/references/clean --threads 1"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_rRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_rRNA -o ${RES}/references/clean --threads 1
		done
		cat ${RES}/references/clean/chloroplast_rRNA/*.fa > ${CHLORO_REF_rRNA}
    rm -rf ${RES}/references/unclean/chloroplast_rRNA/
		echo "STATUS: done"

    echo '*** alignment of tRNA into seeds, and extraction of final tRNA of reference ***'
		for file in `find ${RES}/references/unclean/chloroplast_tRNA/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_tRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_tRNA -o ${RES}/references/clean --threads 1"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_tRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_tRNA -o ${RES}/references/clean --threads 1
		done
		cat ${RES}/references/clean/chloroplast_tRNA/*.fa > ${CHLORO_REF_tRNA}
    rm -rf ${RES}/references/unclean/chloroplast_tRNA/
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'phyloskim_database' ] && [ $target == 'chloroplast' ]; then
    echo "INFO: mode=$mode - Creation of chloroplastic database from phyloskims annotations for CDS, tRNA and rRNA features"
    mkdir -p ${RES}/references/clean
    while read f;
		do
			file=`echo ${f} | awk '{print $4}'`
      lib=`echo ${f} | awk '{print $1}'`
      cond_count=`grep -c '//' $file`
      cond_circ=`awk '$1 ~ /^ID/ {print}' $file | grep -c "circular"`
      if [ -s ${RES}/references/chloroplast_done.log ]; then
        if grep -Fxq "${lib}" ${RES}/references/chloroplast_done.log; then
          echo "WARN: $lib already processed"
          continue
        else
          if [ $cond_count==1 ] && [ $cond_circ==1 ]; then
            echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean"
      			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean; then
              echo $lib >> ${RES}/references/chloroplast_done.log
            else
              echo $lib >> ${RES}/references/chloroplast_error.log
            fi
          else
            echo $lib >> ${RES}/references/chloroplast_error.log
          fi
        fi
      else
        if [ $cond_count==1 ] && [ $cond_circ==1 ]; then
          echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean"
    			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean; then
            echo $lib >> ${RES}/references/chloroplast_done.log
          else
            echo $lib >> ${RES}/references/chloroplast_error.log
          fi
        else
          echo $lib >> ${RES}/references/chloroplast_error.log
        fi
      fi
		done <${LIST_FILES}
    cat ${RES}/references/clean/chloroplast_CDS/*.fa > ${CHLORO_REF_CDS}
    cat ${RES}/references/clean/chloroplast_tRNA/*.fa > ${CHLORO_REF_tRNA}
    cat ${RES}/references/clean/chloroplast_rRNA/*.fa > ${CHLORO_REF_rRNA}
    if [ $CHLORO_DB_FMT == "embl"]; then
      extens="embl"
    else
      extens="gb"
    fi
    cat ${RES}/references/clean/chloroplast_genomes.${extens} > ${CHLORO_ANNOTATIONS}

		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'phyloskim_database' ] && [ $target == 'nucrdna' ]; then
    echo "INFO: mode=$mode - Creation of nucrdna database from phyloskims annotations for rRNA features"
    mkdir -p ${RES}/references/clean
    while read f;
		do
			file=`echo ${f} | awk '{print $4}' | perl -pe 's/.chloro.embl/.rdnanuc.embl/'`
      lib=`echo ${f} | awk '{print $1}'`
      cond_count=`grep -c '//' $file`
      if [ -s ${RES}/references/nucrdna_done.log ]; then
        if grep -Fxq "${lib}" ${RES}/references/nucrdna_done.log; then
          echo "WARN: $lib already processed"
          continue
        else
          if [ $cond_count==1 ]; then
            echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean"
      			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean; then
              echo $lib >> ${RES}/references/nucrdna_done.log
            else
              echo $lib >> ${RES}/references/nucrdna_error.log
            fi
          else
            echo $lib >> ${RES}/references/nucrdna_error.log
          fi
        fi
      else
        if [ $cond_count==1 ]; then
          echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean"
    			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean; then
            echo $lib >> ${RES}/references/nucrdna_done.log
          else
            echo $lib >> ${RES}/references/nucrdna_error.log
          fi
        else
          echo $lib >> ${RES}/references/nucrdna_error.log
        fi
      fi
		done <${LIST_FILES}

    `dirname $0`/src/rrnITS.py -p ${RES}/references/clean/nucrdna_rRNA/ -o ${RES}/references/clean/nucrdna_misc_RNA/
    `dirname $0`/src/rrnITS_seeds.py -i ${SEEDS_NRDNA}

    cat ${RES}/references/clean/nucrdna_rRNA/*.fa > ${NRDNA_REF}
    cat ${RES}/references/clean/nucrdna_misc_RNA/*.fa >> ${NRDNA_REF}
    if [ $NRDNA_DB_FMT == "embl"]; then
      extens="embl"
    else
      extens="gb"
    fi
    cat ${RES}/references/clean/nucrdna_genomes.${extens} > ${NRDNA_ANNOTATIONS}

		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'mitochondrion_rRNA' ]; then
    echo 'INFO: mode=$mode - Extraction of mitchondrial rRNA from non targeted assemblies (SPADes assembly)'
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
    do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/mitochondrion_rRNA_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/mitochondrion_rRNA_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_rRNA} --target mitochondrion_rRNA"
              `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_rRNA} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_rRNA} --target mitochondrion_rRNA"
              `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_rRNA} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                  if [ ${PLANT_MODEL} == "yes" ]; then
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                      `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                      echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                    else
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                    fi
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of closed genomes ***"
                      if [ ${MODE_REF} == "distance" ]; then
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                      else
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                      fi
                      CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                      CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                      CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                      if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into closed genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  			${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                            if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                              `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                              echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                            else
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                              `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                              echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                            fi
                          else
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi

                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of closed genomes ***"
                      if [ ${MODE_REF} == "distance" ]; then
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                      else
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                      fi
                      CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                      CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                      if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into closed genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          else
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_rRNA} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_rRNA} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_rRNA} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_rRNA} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                  fi
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                  echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                fi
              else
                echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                      else
                        echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'mitochondrion_CDS' ]; then
    echo 'INFO: mode=$mode - Extraction of mitchondrial CDS from non targeted assemblies (SPADes assembly)'
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/mitochondrion_CDS_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/mitochondrion_CDS_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_CDS} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_CDS} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_CDS} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_CDS} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                  if [ ${PLANT_MODEL} == "yes" ]; then
                    if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                      `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                      echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                    else
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                    fi
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of closed genomes ***"
                      if [ ${MODE_REF} == "distance" ]; then
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                      else
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                      fi
                      CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                      CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                      CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                      if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into closed genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  			${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                            if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                              `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                              echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                            else
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                              `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                              echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                            fi
                          else
                            echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of closed genomes ***"
                      if [ ${MODE_REF} == "distance" ]; then
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                      else
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                      fi
                      CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                      CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                      if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into closed genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          else
                            echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_CDS} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_MITO_CDS} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_CDS} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_MITO_CDS} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
              if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                  fi
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                  echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                fi
              else
                echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                      else
                        echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
      fi
		done <${LIST_FILES}
    echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'uce' ]; then
    echo 'INFO: mode=$mode - Extraction of UCE loci from assemblies'
    mkdir -p ${RES}/Mapping/uce
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
    do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/uce_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/uce_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}"
              `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}"
              `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              # copier ici ancienne version d'orthoskim avec le blast/diamond sur les genes
              echo "CMD: ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl"
              ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl
              echo "*** mapping and extraction of assemblies into reference ***"
              echo "CMD: ${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/uce/matches_uce_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn"
        			${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/uce/matches_uce_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn
        			awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/uce/matches_uce_${lib} | sort | uniq > ${RES}/Mapping/uce/hits_uce_${lib}
              if [ -s ${RES}/Mapping/uce/hits_uce_${lib} ]; then
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/uce/hits_uce_${lib} - > ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/uce/out_uce_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/uce/out_uce_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta -g ${RES}/Mapping/uce/out_uce_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${UCE_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta -g ${RES}/Mapping/uce/out_uce_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${UCE_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta ${RES}/Mapping/uce/hits_uce_${lib} ${RES}/Mapping/uce/matches_uce_${lib}
                  echo ${lib} >> ${RES}/uce_done.log
                else
                  echo ${lib} >> ${RES}/uce_error.log
                fi
              else
                echo "WARN: No hits were detected when mapping ${lib} into ${CLOSED_REF} database"
                echo ${lib} >> ${RES}/uce_error.log
                continue
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/uce_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${UCE_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            echo "CMD: ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl"
            ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl
            echo "*** mapping and extraction of assemblies into reference ***"
            echo "CMD: ${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/uce/matches_uce_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn"
            ${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/uce/matches_uce_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn
            awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/uce/matches_uce_${lib} | sort | uniq > ${RES}/Mapping/uce/hits_uce_${lib}
            if [ -s ${RES}/Mapping/uce/hits_uce_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/uce/hits_uce_${lib} - > ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/uce/out_uce_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/uce/out_uce_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta -g ${RES}/Mapping/uce/out_uce_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${UCE_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta -g ${RES}/Mapping/uce/out_uce_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${UCE_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/uce/contigs_hits_uce_${lib}.fasta ${RES}/Mapping/uce/hits_uce_${lib} ${RES}/Mapping/uce/matches_uce_${lib}
                echo ${lib} >> ${RES}/uce_done.log
              else
                echo ${lib} >> ${RES}/uce_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/uce_error.log
              continue
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/uce_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/uce_error.log
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'nucleus_nt' ]; then
    echo 'INFO: mode=$mode - Extraction of nuclear loci from assemblies'
    mkdir -p ${RES}/Mapping/nucleus
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/nucleus_nt_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/nucleus_nt_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}"
              `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}"
              `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              echo "CMD: ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl"
              ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl
              echo "*** mapping and extraction of assemblies into reference ***"
              echo "CMD: ${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn"
        			${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn
        			awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib}
              if [ -s ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ]; then
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib}
                  echo ${lib} >> ${RES}/nucleus_nt_done.log
                else
                  echo ${lib} >> ${RES}/nucleus_nt_error.log
                fi
              else
                echo "WARN: No hits were detected when mapping ${lib} into ${CLOSED_REF} database"
                echo ${lib} >> ${RES}/nucleus_nt_error.log
                continue
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/nucleus_nt_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            echo "CMD: ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl"
            ${BLASTDB} -in ${CLOSED_REF} -dbtype nucl
            echo "*** mapping and extraction of assemblies into reference ***"
            echo "CMD: ${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn"
            ${BLASTN} -db ${CLOSED_REF} -query $file -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn
            awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib}
            if [ -s ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib}
                echo ${lib} >> ${RES}/nucleus_nt_done.log
              else
                echo ${lib} >> ${RES}/nucleus_nt_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/nucleus_nt_error.log
              continue
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/nucleus_nt_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/nucleus_nt_error.log
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'nucleus_aa' ]; then
    echo 'INFO: mode=$mode - Extraction of nuclear loci from assemblies'
    mkdir -p ${RES}/Mapping/nucleus
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/nucleus_aa_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/nucleus_aa_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}"
              `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}"
              `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              refdb=${CLOSED_REF/.fa/}
              echo "CMD: ${DIAMOND} makedb --in ${CLOSED_REF} -d ${refdb}"
          		${DIAMOND} makedb --in ${CLOSED_REF} -d ${refdb} --threads ${THREADS}
              echo "*** mapping and extraction of assemblies into reference ***"
              echo "CMD: ${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q $file -o ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive"
        			${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q $file -o ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive
        			awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib}
              if [ -s ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ]; then
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta
                echo "CMD: ${EXONERATE} --model protein2genome -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff"
                if ${EXONERATE} --model protein2genome -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib}
                  echo ${lib} >> ${RES}/nucleus_aa_done.log
                else
                  echo ${lib} >> ${RES}/nucleus_aa_error.log
                fi
              else
                echo "WARN: No hits were detected when mapping ${lib} into ${CLOSED_REF} database"
                echo ${lib} >> ${RES}/nucleus_aa_error.log
                continue
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/nucleus_aa_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            refdb=${CLOSED_REF/.fa/}
            echo "CMD: ${DIAMOND} makedb --in ${CLOSED_REF} -d ${refdb}"
            ${DIAMOND} makedb --in ${CLOSED_REF} -d ${refdb} --threads ${THREADS}
            echo "*** mapping and extraction of assemblies into reference ***"
            echo "CMD: ${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q $file -o ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive"
            ${DIAMOND} blastx --outfmt 6 qseqid sseqid pident length mismatch gapopen qframe qstart qend sstart send evalue bitscore slen -d ${refdb} -q $file -o ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} --evalue ${EVALUE} --threads ${THREADS} --sensitive
            awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $1}' ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib}
            if [ -s ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff"
              if ${EXONERATE} --model protein2genome -q ${CLOSED_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib}
                echo ${lib} >> ${RES}/nucleus_aa_done.log
              else
                echo ${lib} >> ${RES}/nucleus_aa_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/nucleus_aa_error.log
              continue
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/nucleus_aa_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/nucleus_aa_error.log
      fi
		done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'phyloskim_stat_chloro' ]; then
		echo "INFO: mode=$mode - Summary statistics of chloroplast assemblies"
		${QUAST} `awk '{print $4}' ${LIST_FILES} | perl -pe 's/\.embl/.fasta/'  | perl -pe 's/\n/ /'` -o ${RES}/report_chloro_assemblies
		rm -rf ${RES}/report_chloro_assemblies/basic_stats/
		#rm -rf ${RES}/report_chloro_assemblies/icarus_viewers/
		rm ${RES}/report_chloro_assemblies/report.tex ${RES}/report_chloro_assemblies/report.tsv ${RES}/report_chloro_assemblies/report.txt ${RES}/report_chloro_assemblies/transposed_report.tex ${RES}/report_chloro_assemblies/transposed_report.tsv
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'phyloskim_stat_rdna' ]; then
		echo "INFO: mode=$mode - Summary statistics of rdna assemblies"
		${QUAST} `awk '{print $4}' ${LIST_FILES} | perl -pe 's/\.chloro.embl/.rdnanuc.fasta/'  | perl -pe 's/\n/ /'` -o ${RES}/report_rdnanuc_assemblies
		rm -rf ${RES}/report_rdnanuc_assemblies/basic_stats/
		#rm -rf ${RES}/report_rdnanuc_assemblies/icarus_viewers/
		rm ${RES}/report_rdnanuc_assemblies/report.tex ${RES}/report_rdnanuc_assemblies/report.tsv ${RES}/report_rdnanuc_assemblies/report.txt ${RES}/report_rdnanuc_assemblies/transposed_report.tex ${RES}/report_rdnanuc_assemblies/transposed_report.tsv
		echo "STATUS: done"
		exit 0

	elif [ $mode == 'stat_assembly' ]; then
		echo "INFO: mode=$mode - Summary statistics of nuclear assemblies"
		${QUAST} ${RES}/Assembly/Samples/filtered/*.fa -o ${RES}/report_SPAdes_assemblies
		rm -rf ${RES}/report_SPAdes_assemblies/basic_stats/
		#rm -rf ${RES}/report_SPAdes_assemblies/icarus_viewers/
		rm ${RES}/report_SPAdes_assemblies/report.tex ${RES}/report_SPAdes_assemblies/report.tsv ${RES}/report_SPAdes_assemblies/report.txt ${RES}/report_SPAdes_assemblies/transposed_report.tex ${RES}/report_SPAdes_assemblies/transposed_report.tsv
		echo "STATUS: done"
		exit 0

  elif [ $mode == 'stat_capture' ]; then
    echo "INFO: mode=$mode - Summary statistics of genes extraction"
    for element in "${target[@]}";
    do
      echo "CMD: `dirname $0`/src/ExoStat.py -p ${RES}/Extraction/${element} -pfind > ${RES}/${element}_report.log"
      `dirname $0`/src/ExoStat.py -p ${RES}/Extraction/${element} -pfind > ${RES}/${element}_report.log
    done
    echo "STATUS: done"
    exit 0

  elif [ $mode == 'alignment' ]; then
    echo "INFO: mode=$mode - Alignment of taxa from genes capture"
    listpath=`echo ${target[@]} | perl -pe 's/ /,/g'`
    if [ ${SELECTION} == 'on' ]; then
        for element in "${target[@]}";
        do
          echo "INFO: selection of taxa for alignment"
          inpath=${RES}/Extraction/${element}/
          echo "CMD: `dirname $0`/src/SelecTaxa.py --inpath $inpath --outpath ${RES}/Selection -t ${TAXALIST} -e ${EXTENSION} --threads ${THREADS}"
          `dirname $0`/src/SelecTaxa.py --inpath $inpath --outpath ${RES}/Selection -t ${TAXALIST} -e fa --threads ${THREADS}

          echo "INFO: Alignment of each gene"
          alinpath=${RES}/Selection/${element}/
          mkdir -p ${RES}/Selection/Alignment/${element}/files/
          mkdir -p ${RES}/Selection/Alignment/${element}/trim/

          for f in `find ${alinpath} -type f -name \*.fa`;
          do
            echo "CMD: $MAFFT --auto --thread ${THREADS} --adjustdirectionaccurately $f > ${RES}/Selection/Alignment/${element}/files/$(basename $f)"
            $MAFFT --auto --thread ${THREADS} --adjustdirectionaccurately $f > ${RES}/Selection/Alignment/${element}/files/$(basename $f)
            if [ ${TRIMMING} == 'on' ]; then
              echo "INFO: automated alignment trimming is performed"
              echo "CMD: $TRIMAL -in ${RES}/Selection/Alignment/${element}/files/$(basename $f) -automated1 -out ${RES}/Selection/Alignment/${element}/trim/$(basename $f | perl -pe 's/.fa/.trim/')"
              $TRIMAL -in ${RES}/Selection/Alignment/${element}/files/$(basename $f) -automated1 -out ${RES}/Selection/Alignment/${element}/trim/$(basename $f | perl -pe 's/.fa/.trim/')
            else
              :
            fi
          done
        done
        echo "INFO: concatenation of alignments"
        alnfiles=${RES}/Selection/Alignment/
        if [ ${TRIMMING} == 'on' ]; then
          echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Selection/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} --trim -g ${GENES_TO_CONCAT}"
          `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Selection/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} --trim -g ${GENES_TO_CONCAT}
        else
          echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Selection/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} -g ${GENES_TO_CONCAT}"
          `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Selection/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} -g ${GENES_TO_CONCAT}
        fi
    else
      for element in "${target[@]}";
      do
        echo "INFO: No selection of taxa is made for alignment"
        echo "INFO: Alignment of each gene"
        alinpath=${RES}/Extraction/${element}/
        mkdir -p ${RES}/Alignment/${element}/files/
        mkdir -p ${RES}/Alignment/${element}/trim/

        for f in `find ${alinpath} -type f -name \*.fa`;
        do
          echo "CMD: $MAFFT --auto --thread ${THREADS} --adjustdirectionaccurately $f > ${RES}/Alignment/${element}/files/$(basename $f)"
          $MAFFT --auto --thread ${THREADS} --adjustdirectionaccurately $f > ${RES}/Alignment/${element}/files/$(basename $f)
          if [ ${TRIMMING} == 'on' ]; then
            echo "INFO: automated alignment trimming is performed"
            echo "CMD: $TRIMAL -in ${RES}/Alignment/${element}/files/$(basename $f) -automated1 -out ${RES}/Alignment/${element}/trim/$(basename $f | perl -pe 's/.fa/.trim/')"
            $TRIMAL -in ${RES}/Alignment/${element}/files/$(basename $f) -automated1 -out ${RES}/Alignment/${element}/trim/$(basename $f | perl -pe 's/.fa/.trim/')
          else
            :
          fi
        done
      done
      echo "INFO: concatenation of alignments"
      awk '{print $1}' ${LIST_FILES} > ${RES}/Alignment/taxalist
      TAXALIST=${RES}/Alignment/taxalist
      alnfiles=${RES}/Alignment/
      if [ ${TRIMMING} == 'on' ]; then
        echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Alignment/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} --trim -g ${GENES_TO_CONCAT}"
        `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Alignment/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} --trim -g ${GENES_TO_CONCAT}
      else
        echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Alignment/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} -g ${GENES_TO_CONCAT}"
        `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/Alignment/concatenated -t ${TAXALIST} --missingfract ${MISSING_RATIO} --target ${listpath} -g ${GENES_TO_CONCAT}
      echo "STATUS: done"
      fi
    fi
    echo "STATUS: done"
    echo ""
    exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_rRNA' ]; then
		echo 'INFO: mode=$mode - Extraction of chloroplastic rRNA from assemblies'
    mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
			#lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_rRNA_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_rRNA_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_rRNA} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_rRNA} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_rRNA} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_rRNA} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                  if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                            echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_rRNA} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_rRNA} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_rRNA} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_rRNA} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                  `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                  echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                fi
              else
                echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                mkdir -p ${RES}/Mapping/nucrdna
                mkdir -p ${RES}/Mapping/mitochondrion
                echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                echo "*** Extraction of closed genomes ***"
                if [ ${MODE_REF} == "distance" ]; then
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                else
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                fi
                CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into closed genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                        `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                        echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                      else
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                      fi
                    else
                      echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
      fi
    done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_tRNA' ]; then
		echo 'INFO: mode=$mode - Extraction of chloroplastic tRNA from assemblies'
    mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
			#lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_tRNA_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_tRNA_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_tRNA} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_tRNA} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_tRNA} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_tRNA} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                else
                  echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                        else
                          echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                      else
                        echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_tRNA} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_tRNA} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_tRNA} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_tRNA} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
              else
                echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                      else
                        echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                echo "*** Extraction of closed genomes ***"
                if [ ${MODE_REF} == "distance" ]; then
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                else
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                fi
                CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into closed genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                      rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                    else
                      echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
      fi
    done <${LIST_FILES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_CDS' ]; then
		echo 'INFO: mode=$mode - Extraction of chloroplastic CDS from assemblies'
		mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    while read f;
		do
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_CDS_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_CDS_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_CDS} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_CDS} --target ${target}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_CDS} --target ${target}"
              `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_CDS} --target ${target}
            fi
            CLOSED_REF=${RES}/references/closed_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                  if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    echo "INFO: Selection of organelles contigs in $lib assemblies"
                    echo "*** Extraction of closed genomes for chloroplast and mitochondrion ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                            echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  echo "INFO: Selection of organelles contigs in $lib assemblies"
                  echo "*** Extraction of closed genomes for chloroplast and mitochondrion ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/chloroplast_CDS_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_CDS} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_CHLORO_CDS} --target ${target}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_CDS} --target ${target}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_CHLORO_CDS} --target ${target}
          fi
          CLOSED_REF=${RES}/references/closed_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
              if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                  `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                  echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                fi
              else
                echo ${lib} >> ${RES}/chloroplast_CDS_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  echo "INFO: Selection of organelles contigs in $lib assemblies"
                  echo "*** Extraction of closed genomes for chloroplast and mitochondrion ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                echo "INFO: Selection of organelles contigs in $lib assemblies"
                echo "*** Extraction of closed genomes for chloroplast and mitochondrion ***"
                if [ ${MODE_REF} == "distance" ]; then
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                else
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                fi
                CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into closed genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                    if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff"
                        `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                        echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                      else
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                      fi
                    else
                      echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/chloroplast_CDS_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_CDS_error.log
      fi
    done <${LIST_FILES}
    echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'nucrdna' ]; then
    echo 'INFO: mode=$mode - Extraction of nuclear rRNA from non targeted assemblies (SPADes assembly)'
    mkdir -p ${RES}/Mapping/nucrdna
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
    do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/nucrdna_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/nucrdna_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            if [ ${MODE_REF} == "distance" ]; then
              echo "CMD: `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}"
              `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}
            else
              echo "CMD: `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}"
              `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}
            fi
            CLOSED_REF=${RES}/references/closed_ref_${target}.fa
            if [ -s ${CLOSED_REF} ]; then
              if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                  echo ${lib} >> ${RES}/nucrdna_done.log
                else
                  echo ${lib} >> ${RES}/nucrdna_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/mitochondrion
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of closed genomes ***"
                      if [ ${MODE_REF} == "distance" ]; then
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                      else
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                      fi
                      CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                      CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                      CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                      if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into closed genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                        ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                        ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                        ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                        if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                            echo ${lib} >> ${RES}/nucrdna_done.log
                          else
                            echo ${lib} >> ${RES}/nucrdna_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                          echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/mitochondrion
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of closed genomes ***"
                      if [ ${MODE_REF} == "distance" ]; then
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                      else
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                        echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                        `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                      fi
                      CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                      CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                      if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into closed genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                        ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                        ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                        if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                            echo ${lib} >> ${RES}/nucrdna_done.log
                          else
                            echo ${lib} >> ${RES}/nucrdna_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                          echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
              echo ${lib} >> ${RES}/nucrdna_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          if [ ${MODE_REF} == "distance" ]; then
            echo "CMD: `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}"
            `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -d ${DISTANCE_MATRIX} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}
          else
            echo "CMD: `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}"
            `dirname $0`/src/ExtractRef_nucrdna.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${SEEDS_NRDNA} --target ${target} -t ${RNA_THRESHOLD}
          fi
          CLOSED_REF=${RES}/references/closed_ref_${target}.fa
          if [ -s ${CLOSED_REF} ]; then
            if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                echo ${lib} >> ${RES}/nucrdna_done.log
              else
                echo ${lib} >> ${RES}/nucrdna_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${CHLORO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${CHLORO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_CHLORO_GENOME=${RES}/references/closed_chloroplast.fa
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_CHLORO_GENOME} ] && [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_CHLORO_GENOME} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo ${lib} >> ${RES}/nucrdna_done.log
                      else
                        echo ${lib} >> ${RES}/nucrdna_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of closed genomes ***"
                    if [ ${MODE_REF} == "distance" ]; then
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                    else
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                    fi
                    CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                    CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                    if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into closed genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of closed genomes ***"
                  if [ ${MODE_REF} == "distance" ]; then
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${MITO_SIZE} -d ${DISTANCE_MATRIX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MODE_REF} -s ${NRDNA_SIZE} -d ${DISTANCE_MATRIX}
                  else
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${MITO_SIZE}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m taxonomy -s ${NRDNA_SIZE}
                  fi
                  CLOSED_MITO_GENOME=${RES}/references/closed_mitochondrion.fa
                  CLOSED_GENOME=${RES}/references/closed_nucrdna.fa
                  if [ -s ${CLOSED_MITO_GENOME} ] && [ -s ${CLOSED_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSED_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into closed genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSED_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSED_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSED_MITO_GENOME} ${CLOSED_GENOME}
                    if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSED_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSED_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo ${lib} >> ${RES}/nucrdna_done.log
                      else
                        echo ${lib} >> ${RES}/nucrdna_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into closed related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract closed sequences into ${CLOSED_REF} database"
            echo ${lib} >> ${RES}/nucrdna_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/nucrdna_error.log
      fi
    done <${LIST_FILES}
    echo "STATUS: done"
    echo ""
    exit 0

  elif [ $mode == 'check_taxonomy' ]; then

    echo "INFO: mode $mode - Check captured barcodes from blast to NCBI database to validate match among the same family rank"
    listbarcodes=`echo ${BARCODES[@]} | perl -pe 's/ /,/g'`

    if [ ! -d "${RES}/Errors" ]; then
      mkdir ${RES}/Errors
    else
      echo "Directory ${RES}/Errors exists."
    fi
    for element in "${BARCODES[@]}"; do
      echo "INFO: blast of $element into NCBI database"
      if [ ${DB_LOCAL} == 'on' ]; then
        echo "CMD: ${BLASTN} -db ${BLAST_NT_DB} -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs 50 -outfmt "6 qseqid sacc score pident qcovs" -evalue 1e-5 -num_threads ${THREADS} -best_hit_overhang 0.1 -best_hit_score_edge 0.1"
        ${BLASTN} -db ${BLAST_NT_DB} -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs 50 -outfmt "6 qseqid sacc score pident qcovs" -evalue 1e-5 -num_threads ${THREADS} -best_hit_overhang 0.1 -best_hit_score_edge 0.1
      else
        echo "CMD: ${BLASTN} -db nt -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs 50 -outfmt "6 qseqid sacc score pident qcovs" -evalue 1e-5 -num_threads ${THREADS} -best_hit_overhang 0.1 -best_hit_score_edge 0.1 -remote"
        ${BLASTN} -db nt -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs 50 -outfmt "6 qseqid sacc score pident qcovs" -evalue 1e-5 -num_threads ${THREADS} -best_hit_overhang 0.1 -best_hit_score_edge 0.1 -remote
      fi
    done

    echo "INFO: selection of best hits accession for $listbarcodes blast"
    echo "CMD: `dirname $0`/src/BestHits.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXALIST}"
    `dirname $0`/src/BestHits.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXALIST}

    echo "INFO: corresponding between accessions and taxid"
    for element in "${BARCODES[@]}"; do
      awk 'NR==FNR{a[$2]; next} {for (i in a) if (index($0, i)) print $0}' ${RES}/Errors/${element}_besthits.out ${BLAST_NT_ACCESSION_TAXID} >> ${RES}/Errors/tmp.accessions
    done

    cat ${RES}/Errors/tmp.accessions | sort | uniq > ${RES}/Errors/blast.accessions
    rm ${RES}/Errors/tmp.accessions

    echo "INFO: taxids comparison at the family level between query and best hits sequences"

    if [ ${FAMILIES_LOCAL} == 'on' ]; then
      echo "CMD: `dirname $0`/src/TaxIDCompare_missingtaxid.py --accession ${RES}/Errors/blast.accessions -o ${RES}/Errors/ -b $listbarcodes -t ${TAXALIST} --families ${CORRESPONDING_FAMILIES} --local > ${RES}/Errors/ValidationSamples.out"
      `dirname $0`/src/TaxIDCompare_missingtaxid.py --accession ${RES}/Errors/blast.accessions -o ${RES}/Errors/ -b $listbarcodes -t ${TAXALIST} --families ${CORRESPONDING_FAMILIES} --local > ${RES}/Errors/ValidationSamples.out
    else
      echo "CMD: `dirname $0`/src/TaxIDCompare_missingtaxid.py --accession ${RES}/Errors/blast.accessions -o ${RES}/Errors/ -b $listbarcodes -t ${TAXALIST} > ${RES}/Errors/ValidationSamples.out"
      `dirname $0`/src/TaxIDCompare_missingtaxid.py --accession ${RES}/Errors/blast.accessions -o ${RES}/Errors/ -b $listbarcodes -t ${TAXALIST} > ${RES}/Errors/ValidationSamples.out
    fi

    echo "STATUS: done"
    echo ""
    exit 0

	fi

exit 0
