#!/bin/bash

while getopts ":m:c:t:p:" opt; do
  case $opt in
    m) mode="$OPTARG"
    ;;
    c) config="$OPTARG"
    ;;
    t) target+=("$OPTARG")
    ;;
    p) path="$OPTARG"
    ;;
  esac
done


## Help display of function
if [ "$1" == "-h" ]; then
    ##cat `dirname $0`/README.txt
  echo "Usage: `basename $0` [-h] [-m mode] [-c config_file.txt] [-t target]

  O       o O       o O       o
  | O   o | | O   o | | O   o |
  | | O R T H O S K I M | O | |
  | o   O | | o   O | | o   O |
  o       O o       O o       O


ORTHOSKIM: in silico gene capture from genomic and transcriptomic libraries
           where:
            -m (mode) perform pipeline according to the chosen mode:
                  - [alignment] (multiple sequence alignments between libraries and phylogenetic matrix computation)
                  - [assembly] (de novo assembly for each library)
                  - [database] (make a database bank of mitochondrial/chloroplast/nucrdna genes from annotations)
                  - [capture] (capture of targeted sequences from assemblies and references using targets (-t)
                  - [checking] (taxonomic checking of sequences captured from blast alignments into the NCBI database)
                  - [cleaning] (identification and filtering of contaminants in assemblies)
                  - [phyloskim_indexing] (make sample files for phyloskim databases)
                  - [phyloskim_database] (make a database bank of mitochondrial/chloroplast/nucrdna genes from phyloskims annotations)
                  - [phyloskim_extraction_targeted] (extraction of genes from phyloskims annotations; target: chloroplast,nucrdna)
                  - [format] (format assemblies output)
                  - [statistic_assembly,capture] (summary statistics on assemblies and sequence capture)
            -c (config_file) set the config file
            -t (target) gene type targeted:
                  - [chloroplast] (for [*database*, *phyloskim_extraction_targeted*, *phyloskim_database*] modes. Extract all CDS+tRNA+rRNA genes)
                  - [nucrdna] (for [*database*, *capture*, *phyloskim_extraction_targeted*,*phyloskim_database*] modes. Extract all rRNA and Internal Transcribed Spacer)
                  - [mitochondrion] (for *database* mode)
                  - [nucleus_aa] (*capture*,*statistic_capture*)
                  - [nucleus_nt] (*capture*,*statistic_capture*)
                  - [busco] (*capture*,*statistic_capture*)
                  - [chloroplast_CDS] (*capture*,*statistic_capture*)
                  - [chloroplast_tRNA] (*capture*,*statistic_capture*)
                  - [chloroplast_rRNA] (*capture*,*statistic_capture*)
                  - [chloroplast_nt] (*capture*,*statistic_capture*)
                  - [mitochondrion_CDS] (*capture*,*statistic_capture*)
                  - [mitochondrion_rRNA] (*capture*,*statistic_capture*)
                  - [mitochondrion_nt] (*capture*,*statistic_capture*)
                  - [spades] (*assembly*,*format*)
                  - [rnaspades] (*assembly*,*format*)
            -p  (path) [only for phyloskims users] give path to indexing file
            "
  exit 0
fi


## OrthoSkim process
source $config
source `dirname $0`/tools.sh

set -e

if [ ${VERBOSE} -eq 1 ]; then
      set -x
fi


echo 'Processing ORTHOSKIM'
echo "
O       o O       o O       o
| O   o | | O   o | | O   o |
| | O R T H O S K I M | O | |
| o   O | | o   O | | o   O |
o       O o       O o       O
"


  if [ $mode == 'phyloskim_indexing' ]; then
		echo "INFO: indexing of annotation files"
    echo "CMD: `dirname $0`/src/Indexing.py -p ${path} -cfind > ${SAMPLES}"
		`dirname $0`/src/Indexing.py -p ${path} -cfind > ${SAMPLES}
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'format' ] && [ $target == 'spades' ]; then
		echo "INFO: preprocessing of assemblies files from SPAdes"
    start=$(date +%s)
    mkdir -p ${RES}/Assembly/Samples/unfiltered/
		while read f;
		do
      samplename=`echo ${f} | awk '{print $1}'`
      if [ -s ${RES}/Assembly/SPADES/${samplename}/scaffolds.fasta ]; then
        cp ${RES}/Assembly/SPADES/${samplename}/scaffolds.fasta ${RES}/Assembly/Samples/unfiltered/${samplename}.fa
      else
        echo "WARN: $samplename unprocessed"
        continue
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'format' ] && [ $target == 'rnaspades' ]; then
    echo "INFO: preprocessing of assemblies files from RNASPAdes"
    start=$(date +%s)
    mkdir -p ${RES}/Assembly/Samples/unfiltered/
    while read f;
		do
      samplename=`echo ${f} | awk '{print $1}'`
      echo $samplename
      echo "${RES}/Assembly/RNASPADES/$samplename/transcripts.fasta"
      if [ -s ${RES}/Assembly/RNASPADES/${samplename}/transcripts.fasta ]; then
        cp ${RES}/Assembly/RNASPADES/${samplename}/transcripts.fasta ${RES}/Assembly/Samples/unfiltered/${samplename}.fa
      else
        echo "WARN: $samplename unprocessed"
        #continue
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'cleaning' ]; then
    echo "INFO: identification and filtering of contaminants in assemblies"
    mkdir -p ${RES}/Assembly/Samples/filtered/
    mkdir -p ${RES}/Assembly/Samples/log/
    start=$(date +%s)
    echo "*** make BLAST formatted reference database for rRNA sequences ***"
    for seq in `dirname $0`/resources/rRNA_database/*.fasta;
    do
      ${BLASTDB} -in $seq -dbtype nucl
    done
    echo "*** filtering of taxa assemblies ***"
    while read f;
    do
      lib=`echo ${f} | awk '{print $1}'`
      if [ -s ${RES}/Assembly/cleaning_done.log ]; then
        if grep -Fxq "${lib}" ${RES}/Assembly/cleaning_done.log; then
          echo "WARN: $lib contigs already cleaned"
          continue
        else
          file=${RES}/Assembly/Samples/unfiltered/${lib}.fa
          if [ -s $file ]; then
            for seq in `dirname $0`/resources/rRNA_database/silva-*.fasta;
            do
              echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
              ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
            done
            for seq in `dirname $0`/resources/rRNA_database/rfam*.fasta;
            do
              echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=100 '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
              ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=100 '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
            done
            for seq in `dirname $0`/resources/rRNA_database/DBFAM*.fasta;
            do
              echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
              ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
            done
            `dirname $0`/src/SelectContigs_contaminants.py --blast ${RES}/Assembly/Samples/blast_${lib}.out --rank ${TAXONOMIC_PHYLUM_EXPECTED} --taxo `dirname $0`/resources/rRNA_database_taxonomy.txt > ${RES}/Assembly/Samples/log/bad_${lib}.log
            awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a == 0) {print ">"$1"\n"$NF}}' ${RES}/Assembly/Samples/log/bad_${lib}.log - > ${RES}/Assembly/Samples/filtered/${lib}.fa
            rm ${RES}/Assembly/Samples/blast_${lib}.out
            echo ""
            echo "filtering done for $lib"
            echo $lib >> ${RES}/Assembly/cleaning_done.log
            echo ""
          else
            echo "WARN: ${file} does not exist"
            continue
          fi
        fi
      else
        file=${RES}/Assembly/Samples/unfiltered/${lib}.fa
        if [ -s $file ]; then
          for seq in `dirname $0`/resources/rRNA_database/silva-*.fasta;
          do
            echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
            ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
          done
          for seq in `dirname $0`/resources/rRNA_database/rfam*.fasta;
          do
            echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=100 '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
            ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=100 '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
          done
          for seq in `dirname $0`/resources/rRNA_database/DBFAM*.fasta;
          do
            echo "CMD: ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if (\$3>=SIM && \$4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out"
            ${BLASTN} -db $seq -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn -best_hit_overhang 0.1 -max_target_seqs 1 -best_hit_score_edge 0.1 | awk -v SIM=${SIMILARITY_CONTA_THSLD} -v LEN=${MAPPING_CONTA_LENGTH} '!/^#/ {if ($3>=SIM && $4>=LEN) print}' >> ${RES}/Assembly/Samples/blast_$lib.out
          done
          `dirname $0`/src/SelectContigs_contaminants.py --blast ${RES}/Assembly/Samples/blast_${lib}.out --rank ${TAXONOMIC_PHYLUM_EXPECTED} --taxo `dirname $0`/resources/rRNA_database_taxonomy.txt > ${RES}/Assembly/Samples/log/bad_${lib}.log
          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a == 0) {print ">"$1"\n"$NF}}' ${RES}/Assembly/Samples/log/bad_${lib}.log - > ${RES}/Assembly/Samples/filtered/${lib}.fa
          rm ${RES}/Assembly/Samples/blast_${lib}.out
          echo ""
          echo "filtering done for $lib"
          echo $lib >> ${RES}/Assembly/cleaning_done.log
          echo ""
        else
          echo "WARN: ${file} does not exist"
          continue
        fi
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
    exit 0

	elif [ $mode == 'assembly' ] && [ $target == 'spades' ]; then
		echo "INFO: SPAdes assembly run"
    mkdir -p ${RES}/Assembly/Samples
    mkdir -p ${RES}/Assembly/SPADES
    start=$(date +%s)
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
			r1=`echo ${f} | awk '{print $2}'`
			r2=`echo ${f} | awk '{print $3}'`
			#outp=`echo ${f} | awk '{print $6}'`
      # if assembly_done existed
      if [ -s ${RES}/assembly_done.log ]; then
        # we checked if sample already in done.log to continue to another sample
        if grep -Fxq "${samplename}" ${RES}/assembly_done.log; then
          echo "WARN: $samplename already processed"
          continue
        else
          echo "${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}"
          # we check if no error on function run
          if ${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}; then
            echo $samplename >> ${RES}/assembly_done.log
          else
            echo $samplename >> ${RES}/assembly_error.log
          fi
        fi
      else
        echo "${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}"
        if ${SPADES} -1 ${r1} -2 ${r2} --cov-cutoff auto -o ${RES}/Assembly/SPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}; then
          echo ${samplename} >> ${RES}/assembly_done.log
        else
          echo ${samplename} >> ${RES}/assembly_error.log
        fi
      fi
		done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'assembly' ] && [ $target == 'rnaspades' ]; then
    echo "INFO: RNASPAdes assembly run"
    mkdir -p ${RES}/Assembly/Samples
    mkdir -p ${RES}/Assembly/RNASPADES
    start=$(date +%s)
    while read f;
    do
      samplename=`echo ${f} | awk '{print $1}'`
      r1=`echo ${f} | awk '{print $2}'`
      r2=`echo ${f} | awk '{print $3}'`
      #outp=`echo ${f} | awk '{print $6}'`
      # if assembly_done existed
      if [ -s ${RES}/assembly_done.log ]; then
        # we checked if sample already in done.log to continue to another sample
        if grep -Fxq "${samplename}" ${RES}/assembly_done.log; then
          echo "WARN: $samplename already processed"
          continue
        else
          echo "${SPADES} --rna -1 ${r1} -2 ${r2} -o ${RES}/Assembly/RNASPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}"
          # we check if no error on function run
          if ${SPADES} --rna -1 ${r1} -2 ${r2} -o ${RES}/Assembly/RNASPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}; then
            echo $samplename >> ${RES}/assembly_done.log
          else
            echo $samplename >> ${RES}/assembly_error.log
          fi
        fi
      else
        echo "${SPADES} --rna -1 ${r1} -2 ${r2} -o ${RES}/Assembly/RNASPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}"
        if ${SPADES} --rna -1 ${r1} -2 ${r2} -o ${RES}/Assembly/RNASPADES/${samplename} -t ${THREADS} -m ${MEMORY} -k ${KMER}; then
          echo ${samplename} >> ${RES}/assembly_done.log
        else
          echo ${samplename} >> ${RES}/assembly_error.log
        fi
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
    exit 0

	elif [ $mode == 'capture' ] && [ $target == 'busco' ]; then
		echo "INFO: capture of BUSCO markers from assemblies"
    start=$(date +%s)
    mkdir -p ${RES}/Mapping/busco
    mkdir -p ${RES}/Mapping/tmp
		echo "*** mapping and extraction of assemblies into reference ***"
    while read f;
		do
			lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/busco_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/busco_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            cp $file ${RES}/Mapping/tmp
            echo "CMD: ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl"
            ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl
            echo "CMD: ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${BUSCO_REF} -out ${RES}/Mapping/busco/matches_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn"
            ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${BUSCO_REF} -out ${RES}/Mapping/busco/matches_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn
            awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($2,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $2}' ${RES}/Mapping/busco/matches_${lib} | sort | uniq > ${RES}/Mapping/busco/hits_${lib}
            if [ -s ${RES}/Mapping/busco/hits_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/busco/hits_${lib} - > ${RES}/Mapping/busco/contigs_hits_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff"
              if ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                rm ${RES}/Mapping/busco/contigs_hits_${lib}.fasta ${RES}/Mapping/busco/hits_${lib} ${RES}/Mapping/busco/matches_${lib}
          			echo ${lib} >> ${RES}/busco_done.log
              else
                echo ${lib} >> ${RES}/busco_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${BUSCO_REF} database"
              echo ${lib} >> ${RES}/busco_error.log
              continue
            fi
          fi
        else
          cp $file ${RES}/Mapping/tmp
          echo "CMD: ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl"
          ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl
          echo "CMD: ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${BUSCO_REF} -out ${RES}/Mapping/busco/matches_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn"
          ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${BUSCO_REF} -out ${RES}/Mapping/busco/matches_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn
          awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($2,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $2}' ${RES}/Mapping/busco/matches_${lib} | sort | uniq > ${RES}/Mapping/busco/hits_${lib}
          if [ -s ${RES}/Mapping/busco/hits_${lib} ]; then
            awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/busco/hits_${lib} - > ${RES}/Mapping/busco/contigs_hits_${lib}.fasta
            echo "CMD: ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff"
            if ${EXONERATE} --model protein2genome -q ${BUSCO_REF} -t ${RES}/Mapping/busco/contigs_hits_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/busco/out_${lib}.gff; then
              echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
              `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/busco/contigs_hits_${lib}.fasta -g ${RES}/Mapping/busco/out_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${BUSCO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${BUSCO_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
              rm ${RES}/Mapping/busco/contigs_hits_${lib}.fasta ${RES}/Mapping/busco/hits_${lib} ${RES}/Mapping/busco/matches_${lib}
        			echo ${lib} >> ${RES}/busco_done.log
            else
              echo ${lib} >> ${RES}/busco_error.log
            fi
          else
            echo "WARN: No hits were detected when mapping ${lib} into ${BUSCO_REF} database"
            echo ${lib} >> ${RES}/busco_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/busco_error.log
      fi
		done <${SAMPLES}
    rm -rf ${RES}/Mapping/tmp
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'phyloskim_extraction_targeted' ] && [ $target == 'chloroplast' ]; then
		echo "INFO: Extraction of chloroplastic genes from annotated files"
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
			file=`echo ${f} | awk '{print $4}'`
      echo $samplename
      if [ -s $file ]; then
        if grep -c '//' $file; then
          cond_count=`grep -c '//' $file`
          echo $cond_count
          if [ $cond_count == 1 ]; then
            cond_circ=`awk '$1 ~ /^ID/ {print}' $file | grep -c "circular"`
            if [ -s ${RES}/chloroplast_done.log ]; then
              if grep -Fxq "${samplename}" ${RES}/chloroplast_done.log; then
                echo "WARN: $samplename already processed"
                continue
              else
                if [ $cond_circ==1 ]; then
                  echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"chloroplast\" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
            			if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "chloroplast" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
                    echo $samplename >> ${RES}/chloroplast_done.log
                  else
                    echo $samplename >> ${RES}/chloroplast_error.log
                  fi
                else
                  echo "no circular contig for" $samplename
                  echo $samplename >> ${RES}/chloroplast_error.log
                fi
              fi
            else
              if [ $cond_circ == 1 ]; then
                echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"chloroplast\" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
                if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "chloroplast" -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
                  echo $samplename >> ${RES}/chloroplast_done.log
                else
                  echo $samplename >> ${RES}/chloroplast_error.log
                fi
              else
                echo "no circular contig for" $samplename
                echo $samplename >> ${RES}/chloroplast_error.log
              fi
            fi
          else
            echo "multiple contigs in" $samplename
            echo $samplename >> ${RES}/chloroplast_error.log
          fi
        else
          echo "error on file" $file
          echo $samplename >> ${RES}/chloroplast_error.log
        fi
      else
        echo $samplename
        echo $samplename >> ${RES}/chloroplast_error.log
      fi
		done <${SAMPLES}
		echo "STATUS: done"
		exit 0

	elif [ $mode == 'phyloskim_extraction_targeted' ] && [ $target == 'nucrdna' ]; then
		echo "INFO: Extraction of nuclear rDNA genes from annotated files"
		while read f;
		do
			samplename=`echo ${f} | awk '{print $1}'`
			file=`echo ${f} | awk '{print $4}' | perl -pe 's/.chloro.embl/.rdnanuc.embl/'`
      if [ -s $file ]; then
        if grep -c '//' $file; then
          cond_count=`grep -c '//' $file`
          if [ -s ${RES}/nucrdna_done.log ]; then
            if grep -Fxq "${samplename}" ${RES}/nucrdna_done.log; then
              echo "WARN: $samplename already processed"
              continue
            else
              if [ $cond_count == 1 ]; then
                echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"nucrdna\" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
                if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "nucrdna" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
                  echo ${samplename} >> ${RES}/nucrdna_done.log
                else
                  echo ${samplename} >> ${RES}/nucrdna_error.log
                fi
              else
                echo "multiple contigs for" $samplename
                echo ${samplename} >> ${RES}/nucrdna_error.log
              fi
            fi
          else
            if [ $cond_count == 1 ]; then
              echo "CMD: `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m \"nucrdna\" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}"
              if `dirname $0`/src/AnoSamp_threads.py -t ${file} -n ${samplename} -m "nucrdna" -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/Extraction/ --threads ${THREADS}; then
                echo ${samplename} >> ${RES}/nucrdna_done.log
              else
                echo ${samplename} >> ${RES}/nucrdna_error.log
              fi
            else
              echo "multiple contigs for" $samplename
              echo ${samplename} >> ${RES}/nucrdna_error.log
            fi
          fi
        else
          echo "error on file" $file
          echo ${samplename} >> ${RES}/nucrdna_error.log
        fi
      else
        echo $samplename >> ${RES}/nucrdna_error.log
      fi
		done <${SAMPLES}
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'database' ] && [ $target == 'mitochondrion' ]; then
		echo "INFO: Creation of mitochondrial database from annotations for CDS and rRNA features"
		mkdir -p ${RES}/references/unclean
    start=$(date +%s)
    echo '*** extraction of all genes from annotations ***'
    echo "CMD: `dirname $0`/src/AnoRef_extraction.py --single -in ${MITO_ANNOTATIONS} -o ${RES}/references/unclean -m mitochondrion -fmt ${MITO_DB_FMT} --codon `dirname $0`/resources/tRNA_codons.tab"
		`dirname $0`/src/AnoRef_extraction.py --single -in ${MITO_ANNOTATIONS} -o ${RES}/references/unclean -m mitochondrion -fmt ${MITO_DB_FMT} --codon `dirname $0`/resources/tRNA_codons.tab

		echo '*** alignment of CDS into mito seeds, and extraction of final CDS of reference ***'
		for file in `find ${RES}/references/unclean/mitochondrion_CDS/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_CDS} -g ${RES}/references/tmp.exonerate -m mitochondrion_CDS -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_CDS} -g ${RES}/references/tmp.exonerate -m mitochondrion_CDS -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}
		done
		cat ${RES}/references/clean/mitochondrion_CDS/*.fa > ${MITO_REF_CDS}
    rm -rf ${RES}/references/unclean/mitochondrion_CDS/
		#echo "STATUS: done"

    echo '*** alignment of rRNA into mito seeds, and extraction of final rRNA of reference ***'
		for file in `find ${RES}/references/unclean/mitochondrion_rRNA/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_rRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_rRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_rRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_rRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}
		done
		cat ${RES}/references/clean/mitochondrion_rRNA/*.fa > ${MITO_REF_rRNA}
    rm -rf ${RES}/references/unclean/mitochondrion_rRNA/

    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""

    # echo '*** alignment of tRNA into mito seeds, and extraction of final tRNA of reference ***'
		# for file in `find ${RES}/references/unclean/mitochondrion_tRNA/ -type f -name \*.fa`;
		# do
    #   echo "CMD: ${EXONERATE} -q ${SEEDS_MITO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
		# 	${EXONERATE} -q ${SEEDS_MITO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
    #   echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_tRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_tRNA -o ${RES}/references/clean --threads ${THREADS}"
    #   `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_MITO_tRNA} -g ${RES}/references/tmp.exonerate -m mitochondrion_tRNA -o ${RES}/references/clean --threads ${THREADS}
		# done
		# cat ${RES}/references/clean/mitochondrion_tRNA/*.fa > ${MITO_REF_tRNA}
		# echo "STATUS: done"

		exit 0

  elif [ $mode == 'database' ] && [ $target == 'nucrdna' ]; then
    echo "INFO: Creation of nucrdna database from annotations for rRNA features"
    mkdir -p ${RES}/references/unclean
    start=$(date +%s)
    echo '*** extraction of all genes from annotations ***'
    echo "CMD: `dirname $0`/src/AnoRef_nucrdna.py --single -in ${NRDNA_ANNOTATIONS} -o ${RES}/references/unclean -m nucrdna -fmt ${NRDNA_DB_FMT}"
    `dirname $0`/src/AnoRef_nucrdna.py --single -in ${NRDNA_ANNOTATIONS} -o ${RES}/references/unclean -m nucrdna -fmt ${NRDNA_DB_FMT}

    echo '*** alignment of rRNA into seeds, and extraction of final reference ***'
    for file in `find ${RES}/references/unclean/nucrdna_rRNA/ -type f -name \*.fa`;
    do
      echo "CMD: ${EXONERATE} --model genome2genome -q ${SEEDS_NRDNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
      ${EXONERATE} --model genome2genome -q ${SEEDS_NRDNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_NRDNA} -g ${RES}/references/tmp.exonerate -m nucrdna_rRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_NRDNA} -g ${RES}/references/tmp.exonerate -m nucrdna_rRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}
    done

    `dirname $0`/src/rrnITS.py -p ${RES}/references/clean/nucrdna_rRNA -o ${RES}/references/clean/nucrdna_misc_RNA
    `dirname $0`/src/rrnITS_seeds.py -i ${SEEDS_NRDNA}

    cat ${RES}/references/clean/nucrdna_rRNA/*.fa > ${NRDNA_REF}
    cat ${RES}/references/clean/nucrdna_misc_RNA/*.fa >> ${NRDNA_REF}
    rm -rf ${RES}/references/unclean/nucrdna_rRNA/
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""

    exit 0

  elif [ $mode == 'database' ] && [ $target == 'chloroplast' ]; then
		echo "INFO: Creation of chloroplast database from annotations for CDS, tRNA and rRNA features"
		mkdir -p ${RES}/references/unclean
    start=$(date +%s)
    echo '*** extraction of all genes from annotations ***'
    echo "CMD: `dirname $0`/src/AnoRef_extraction.py --single -in ${CHLORO_ANNOTATIONS} -o ${RES}/references/unclean -m chloroplast -fmt ${CHLORO_DB_FMT} --codon `dirname $0`/resources/tRNA_codons.tab"
		`dirname $0`/src/AnoRef_extraction.py --single -in ${CHLORO_ANNOTATIONS} -o ${RES}/references/unclean -m chloroplast -fmt ${CHLORO_DB_FMT} --codon `dirname $0`/resources/tRNA_codons.tab

		echo '*** alignment of CDS into seeds, and extraction of final CDS of reference ***'
		for file in `find ${RES}/references/unclean/chloroplast_CDS/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_CDS} -g ${RES}/references/tmp.exonerate -m chloroplast_CDS -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_CDS} -g ${RES}/references/tmp.exonerate -m chloroplast_CDS -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}
		done
		cat ${RES}/references/clean/chloroplast_CDS/*.fa > ${CHLORO_REF_CDS}
    rm -rf ${RES}/references/unclean/chloroplast_CDS/
		#echo "STATUS: done"

    echo '*** alignment of rRNA into seeds, and extraction of final rRNA of reference ***'
		for file in `find ${RES}/references/unclean/chloroplast_rRNA/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_rRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_rRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_rRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_rRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}
		done
		cat ${RES}/references/clean/chloroplast_rRNA/*.fa > ${CHLORO_REF_rRNA}
    rm -rf ${RES}/references/unclean/chloroplast_rRNA/
		#echo "STATUS: done"

    echo '*** alignment of tRNA into seeds, and extraction of final tRNA of reference ***'
		for file in `find ${RES}/references/unclean/chloroplast_tRNA/ -type f -name \*.fa`;
		do
      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate"
			${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_tRNA} -t ${file} --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/references/tmp.exonerate
      echo "CMD: `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_tRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_tRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}"
      `dirname $0`/src/ExoGFF_ref.py -i ${file} -s ${SEEDS_CHLORO_tRNA} -g ${RES}/references/tmp.exonerate -m chloroplast_tRNA -o ${RES}/references/clean --threads ${THREADS} -t ${SEEDS_THRESHOLD}
		done
		cat ${RES}/references/clean/chloroplast_tRNA/*.fa > ${CHLORO_REF_tRNA}
    rm -rf ${RES}/references/unclean/chloroplast_tRNA/
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'phyloskim_database' ] && [ $target == 'chloroplast' ]; then
    echo "INFO: Creation of chloroplastic database from phyloskims annotations for CDS, tRNA and rRNA features"
    mkdir -p ${RES}/references/clean
    while read f;
		do
			file=`echo ${f} | awk '{print $4}'`
      lib=`echo ${f} | awk '{print $1}'`
      echo $lib
      if [ -s $file ]; then
        if grep '//' $file; then
          cond_count=`grep -c '//' $file`
          echo $cond_count
          if [ $cond_count == 1 ]; then
            cond_circ=`awk '$1 ~ /^ID/ {print}' $file | grep -c "circular"`
            if [ -s ${RES}/references/chloroplast_done.log ]; then
              if grep -Fxq "${lib}" ${RES}/references/chloroplast_done.log; then
                echo "WARN: $lib already processed"
              else
                if [ $cond_circ==1 ]; then
                  echo $lib
                  echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --cdsseeds ${SEEDS_CHLORO_CDS} --rrnaseeds ${SEEDS_CHLORO_rRNA} --trnaseeds ${SEEDS_CHLORO_tRNA}"
            			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --cdsseeds ${SEEDS_CHLORO_CDS} --rrnaseeds ${SEEDS_CHLORO_rRNA} --trnaseeds ${SEEDS_CHLORO_tRNA}; then
                    echo $lib >> ${RES}/references/chloroplast_done.log
                  else
                    echo $lib >> ${RES}/references/chloroplast_error.log
                  fi
                else
                  echo $lib
                  echo $lib >> ${RES}/references/chloroplast_error.log
                fi
              fi
            else
              if [ $cond_circ == 1 ]; then
                echo $lib
                echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --cdsseeds ${SEEDS_CHLORO_CDS} --rrnaseeds ${SEEDS_CHLORO_rRNA} --trnaseeds ${SEEDS_CHLORO_tRNA}"
          			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m chloroplast -g ${CHLORO_GENES} -fmt ${CHLORO_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --cdsseeds ${SEEDS_CHLORO_CDS} --rrnaseeds ${SEEDS_CHLORO_rRNA} --trnaseeds ${SEEDS_CHLORO_tRNA}; then
                  echo $lib >> ${RES}/references/chloroplast_done.log
                else
                  echo $lib >> ${RES}/references/chloroplast_error.log
                fi
              else
                echo $lib
                echo $lib >> ${RES}/references/chloroplast_error.log
              fi
            fi
          else
            echo "multiple contigs in" $lib
            echo $lib >> ${RES}/references/chloroplast_error.log
          fi

        else
          echo "error on file" $file
          echo $lib >> ${RES}/references/chloroplast_error.log
        fi
      else
        echo $lib
        echo $lib >> ${RES}/references/chloroplast_error.log
      fi
		done <${SAMPLES}

    cat ${RES}/references/clean/chloroplast_CDS/*.fa > ${CHLORO_REF_CDS}
    cat ${RES}/references/clean/chloroplast_tRNA/*.fa > ${CHLORO_REF_tRNA}
    cat ${RES}/references/clean/chloroplast_rRNA/*.fa > ${CHLORO_REF_rRNA}
    if [ $CHLORO_DB_FMT == "embl" ]; then
      extens="embl"
    else
      extens="gb"
    fi
    cat ${RES}/references/clean/chloroplast_genomes.${extens} > ${CHLORO_ANNOTATIONS}

		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'phyloskim_database' ] && [ $target == 'nucrdna' ]; then
    echo "INFO: Creation of nucrdna database from phyloskims annotations for rRNA features"
    mkdir -p ${RES}/references/clean
    while read f;
		do
			file=`echo ${f} | awk '{print $4}' | perl -pe 's/.chloro.embl/.rdnanuc.embl/'`
      lib=`echo ${f} | awk '{print $1}'`
      if [ -s $file ]; then
        if grep '//' $file; then
          cond_count=`grep -c '//' $file`
          if [ -s ${RES}/references/nucrdna_done.log ]; then
            if grep -Fxq "${lib}" ${RES}/references/nucrdna_done.log; then
              echo "WARN: $lib already processed"
              continue
            else
              if [ $cond_count == 1 ]; then
                echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --rrnaseeds ${SEEDS_NRDNA}"
          			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --rrnaseeds ${SEEDS_NRDNA}; then
                  echo $lib >> ${RES}/references/nucrdna_done.log
                else
                  echo $lib >> ${RES}/references/nucrdna_error.log
                fi
              else
                echo $lib >> ${RES}/references/nucrdna_error.log
              fi
            fi
          else
            if [ $cond_count == 1 ]; then
              echo "CMD: `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --rrnaseeds ${SEEDS_NRDNA}"
        			if `dirname $0`/src/AnoRef_phyloskim.py -i ${file} -m nucrdna -g ${NRDNA_GENES} -fmt ${NRDNA_DB_FMT} -o ${RES}/references/clean -t ${SEEDS_THRESHOLD} --rrnaseeds ${SEEDS_NRDNA}; then
                echo $lib >> ${RES}/references/nucrdna_done.log
              else
                echo $lib >> ${RES}/references/nucrdna_error.log
              fi
            else
              echo $lib >> ${RES}/references/nucrdna_error.log
            fi
          fi
        else
          echo "error on file" $file
          echo $lib >> ${RES}/references/nucrdna_error.log
        fi
      else
        echo $lib >> ${RES}/references/nucrdna_error.log
      fi
		done <${SAMPLES}

    `dirname $0`/src/rrnITS.py -p ${RES}/references/clean/nucrdna_rRNA/ -o ${RES}/references/clean/nucrdna_misc_RNA/
    `dirname $0`/src/rrnITS_seeds.py -i ${SEEDS_NRDNA}

    cat ${RES}/references/clean/nucrdna_rRNA/*.fa > ${NRDNA_REF}
    cat ${RES}/references/clean/nucrdna_misc_RNA/*.fa >> ${NRDNA_REF}
    if [ $NRDNA_DB_FMT == "embl" ]; then
      extens="embl"
    else
      extens="gb"
    fi
    cat ${RES}/references/clean/nucrdna_genomes.${extens} > ${NRDNA_ANNOTATIONS}

		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'mitochondrion_rRNA' ]; then
    echo "INFO: Capture of mitchondrial rRNA from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    start=$(date +%s)
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
    do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/mitochondrion_rRNA_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/mitochondrion_rRNA_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_rRNA} --target mitochondrion_rRNA -t ${SEEDS_THRESHOLD}"
            `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                  if [ ${PLANT_MODEL} == "yes" ]; then
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                      `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                      echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                    else
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                    fi
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                          echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                            if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                              `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                              echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                            else
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                              `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                              echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                            fi
                          else
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi

                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          else
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}"
          `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                  fi
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                  echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                fi
              else
                echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_rRNA} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo ${lib} >> ${RES}/mitochondrion_rRNA_done.log
                      else
                        echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/mitochondrion_rRNA_error.log
      fi
		done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'mitochondrion_CDS' ]; then
    mkdir -p ${RES}/Extraction
    echo "INFO: Capture of mitchondrial CDS from assemblies"
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    start=$(date +%s)
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/mitochondrion_CDS_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/mitochondrion_CDS_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}"
            `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                  if [ ${PLANT_MODEL} == "yes" ]; then
                    if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                      `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                      echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                    else
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                      rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                    fi
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                          echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                            if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                              `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                              echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                            else
                              echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                              `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                              rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                              echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                            fi
                          else
                            echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          else
                            echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}"
          `dirname $0`/src/ExtractRef_name.py -in ${MITO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_MITO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
              if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                  fi
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                  echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                fi
              else
                echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_CHLORO_CDS} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta ${RES}/Mapping/mitochondrion/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_threads.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo ${lib} >> ${RES}/mitochondrion_CDS_done.log
                      else
                        echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/mitochondrion_CDS_error.log
      fi
		done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'mitochondrion_nt' ]; then
    echo "INFO: Free-mode of mtDNA sequence capture from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/references
    start=$(date +%s)
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
    do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/mitochondrion_nt_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/mitochondrion_nt_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${MITO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${MITO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                  if [ ${PLANT_MODEL} == "yes" ]; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                    echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                          echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                          else
                            echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not mitochondrial contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/nucrdna
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                            echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                          else
                            echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                          echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/mitochondrion_nt_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${MITO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}"
          `dirname $0`/src/ExtractRef_nucluce.py -in ${MITO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                if [ ${PLANT_MODEL} == "yes" ]; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                  echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                  echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                fi
              else
                echo ${lib} >> ${RES}/mitochondrion_nt_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                      else
                        echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not mitochondrial contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                          echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                        else
                          echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                        echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info - > ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta -g ${RES}/Mapping/mitochondrion/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${MITO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/mitochondrion/contigs_mito_${lib}.fasta
                        echo ${lib} >> ${RES}/mitochondrion_nt_done.log
                      else
                        echo ${lib} >> ${RES}/mitochondrion_nt_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into mitochondrial genomes"
                      echo ${lib} >> ${RES}/Mapping/mitochondrion_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/mitochondrion_nt_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/mitochondrion_nt_error.log
      fi
		done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'nucleus_nt' ]; then
    echo "INFO: Capture of nuclear genes from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/nucleus
    mkdir -p ${RES}/references
    mkdir -p ${RES}/Mapping/tmp
    start=$(date +%s)
    while read f;
		do
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/nucleus_nt_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/nucleus_nt_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ --target ${target}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              cp $file ${RES}/Mapping/tmp
              echo "CMD: ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl"
              ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl
              echo "*** mapping and extraction of assemblies into reference ***"
              echo "CMD: ${BLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task blastn"
              ${BLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task blastn
              awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($2,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $2}' ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib}
              if [ -s ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ]; then
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib}
                  echo ${lib} >> ${RES}/nucleus_nt_done.log
                else
                  echo ${lib} >> ${RES}/nucleus_nt_error.log
                fi
              else
                echo "WARN: No hits were detected when mapping ${lib} into ${CLOSE_REF} database"
                echo ${lib} >> ${RES}/nucleus_nt_error.log
                continue
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/nucleus_nt_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ --target ${target}"
          `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_NT_REF} -q ${lib} -o ${RES}/references/ --target ${target}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            cp $file ${RES}/Mapping/tmp
            echo "CMD: ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl"
            ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl
            echo "*** mapping and extraction of assemblies into reference ***"
            echo "CMD: ${BLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task blastn"
            ${BLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task blastn
            awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($2,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $2}' ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib}
            if [ -s ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_nt_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_nt_${lib} ${RES}/Mapping/nucleus/matches_nucleus_nt_${lib}
                echo ${lib} >> ${RES}/nucleus_nt_done.log
              else
                echo ${lib} >> ${RES}/nucleus_nt_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/nucleus_nt_error.log
              continue
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/nucleus_nt_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/nucleus_nt_error.log
      fi
		done <${SAMPLES}
    rm -rf ${RES}/Mapping/tmp
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'nucleus_aa' ]; then
    echo "INFO: Capture of nuclear loci from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/nucleus
    mkdir -p ${RES}/references
    mkdir -p ${RES}/Mapping/tmp
    start=$(date +%s)
    while read f;
		do
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/nucleus_aa_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/nucleus_aa_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ --target ${target}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              cp $file ${RES}/Mapping/tmp
              echo "CMD: ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl"
              ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl
              echo "CMD: ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn"
              ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn
              awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($2,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $2}' ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib}
              if [ -s ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ]; then
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta
                echo "CMD: ${EXONERATE} --model protein2genome -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff"
                if ${EXONERATE} --model protein2genome -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib}
                  echo ${lib} >> ${RES}/nucleus_aa_done.log
                else
                  echo ${lib} >> ${RES}/nucleus_aa_error.log
                fi
              else
                echo "WARN: No hits were detected when mapping ${lib} into ${CLOSE_REF} database"
                echo ${lib} >> ${RES}/nucleus_aa_error.log
                continue
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/nucleus_aa_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ --target ${target}"
          `dirname $0`/src/ExtractRef_nucluce.py -in ${NUC_AA_REF} -q ${lib} -o ${RES}/references/ --target ${target}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            cp $file ${RES}/Mapping/tmp
            echo "CMD: ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl"
            ${BLASTDB} -in ${RES}/Mapping/tmp/${lib}.fa -dbtype nucl
            echo "CMD: ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn"
            ${TBLASTN} -db ${RES}/Mapping/tmp/${lib}.fa -query ${CLOSE_REF} -out ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} -evalue ${EVALUE} -max_target_seqs ${MAX_SEQS} -num_threads ${THREADS} -outfmt 7 -task tblastn
            awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($2,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print $2}' ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib} | sort | uniq > ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib}
            if [ -s ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ]; then
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} - > ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff"
              if ${EXONERATE} --model protein2genome -q ${CLOSE_REF} -t ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta -g ${RES}/Mapping/nucleus/out_nucleus_aa_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NUC_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                rm ${RES}/Mapping/nucleus/contigs_hits_nucleus_aa_${lib}.fasta ${RES}/Mapping/nucleus/hits_nucleus_aa_${lib} ${RES}/Mapping/nucleus/matches_nucleus_aa_${lib}
                echo ${lib} >> ${RES}/nucleus_aa_done.log
              else
                echo ${lib} >> ${RES}/nucleus_aa_error.log
              fi
            else
              echo "WARN: No hits were detected when mapping ${lib} into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/nucleus_aa_error.log
              continue
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/nucleus_aa_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/nucleus_aa_error.log
      fi
		done <${SAMPLES}
    rm -rf ${RES}/Mapping/tmp
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

	elif [ $mode == 'statistic_assembly' ]; then
		echo "INFO: Summary statistics of cleaned assemblies"
    start=$(date +%s)

    if [ ! -d "${RES}/Statistics" ]; then
      mkdir ${RES}/Statistics
    else
      echo "Directory ${RES}/Statistics exists."
    fi

    while read f;
		do
			lib=`echo ${f} | awk '{print $1}'`
      echo $lib >> ${RES}/Statistics/samples.tmp
    done<${SAMPLES}

    taxalist=${RES}/Statistics/samples.tmp

    echo "CMD: `dirname $0`/src/StatAssemblies.py -p ${RES}/Assembly/Samples/filtered/ -t $taxalist -o ${RES}/Statistics/"
    `dirname $0`/src/StatAssemblies.py -p ${RES}/Assembly/Samples/filtered/ -t $taxalist -o ${RES}/Statistics/
    echo "CMD: `dirname $0`/src/StatConta.py -p ${RES}/Assembly/Samples/log/ -t $taxalist -d `dirname $0`/resources/rRNA_database/ -o ${RES}/Statistics/"
    `dirname $0`/src/StatConta.py -p ${RES}/Assembly/Samples/log/ -t $taxalist -d `dirname $0`/resources/rRNA_database/ -o ${RES}/Statistics/

    rm ${RES}/Statistics/samples.tmp

		#${QUAST} ${RES}/Assembly/Samples/filtered/*.fa -o ${RES}/report_SPAdes_assemblies
		#rm -rf ${RES}/report_SPAdes_assemblies/basic_stats/
		#rm -rf ${RES}/report_SPAdes_assemblies/icarus_viewers/
		#rm ${RES}/report_SPAdes_assemblies/report.tex ${RES}/report_SPAdes_assemblies/report.tsv ${RES}/report_SPAdes_assemblies/report.txt ${RES}/report_SPAdes_assemblies/transposed_report.tex ${RES}/report_SPAdes_assemblies/transposed_report.tsv
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
		exit 0

  elif [ $mode == 'statistic_capture' ]; then
    echo "INFO: Summary statistics of genes capture"
    start=$(date +%s)
    if [ ! -d "${RES}/Statistics" ]; then
      mkdir ${RES}/Statistics
    else
      echo "Directory ${RES}/Statistics exists."
    fi
    for element in "${target[@]}";
    do
      echo "CMD: `dirname $0`/src/ExoStat.py -p ${RES}/Extraction/${element} -pfind > ${RES}/Statistics/${element}_report.log"
      `dirname $0`/src/ExoStat.py -p ${RES}/Extraction/${element} -pfind > ${RES}/Statistics/${element}_report.log
    done
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    exit 0

  elif [ $mode == 'alignment' ]; then
    echo "INFO: Alignment of taxa from genes capture"
    start=$(date +%s)
    listpath=`echo ${target[@]} | perl -pe 's/ /,/g'`
    for element in "${target[@]}";
    do
      inpath=${RES}/Extraction/${element}/
      if [ -d ${RES}/${element} ]; then
        rm -rf ${RES}/${element}
      else
        :
      fi
      echo "CMD: `dirname $0`/src/SelecTaxa.py --inpath $inpath --outpath ${RES}/Selection -t ${TAXA_ALN} -e ${EXTENSION} --threads ${THREADS}"
      `dirname $0`/src/SelecTaxa.py --inpath $inpath --outpath ${RES}/Alignment -t ${TAXA_ALN} -e fa --threads ${THREADS}

      echo "INFO: gene alignment"
      alinpath=${RES}/Alignment/${element}/
      if [ -d ${RES}/Alignment/alignments/${element}/ ]; then
        echo "WARN: previous alignments files have been located and deleted for the $element target"
        rm -rf ${RES}/Alignment/alignments/${element}/
        mkdir -p ${RES}/Alignment/alignments/${element}/files/
        mkdir -p ${RES}/Alignment/alignments/${element}/trim/
      else
        mkdir -p ${RES}/Alignment/alignments/${element}/files/
        mkdir -p ${RES}/Alignment/alignments/${element}/trim/
      fi

      for f in `find ${alinpath} -type f -name \*.fa`;
      do
        if [[ "$f" != *"-like"* ]]; then
          condnum=$(grep -c ">" $f)
          if [[ $condnum -gt 1 ]]; then
            echo "CMD: $MAFFT --auto --thread ${THREADS} --adjustdirectionaccurately $f > ${RES}/Alignment/alignments/${element}/files/$(basename $f)"
            $MAFFT --auto --thread ${THREADS} --adjustdirectionaccurately $f > ${RES}/Alignment/alignments/${element}/files/$(basename $f)
            if [ ${TRIMMING} == 'on' ]; then
              echo "INFO: automated alignment trimming is performed"
              echo "CMD: $TRIMAL -in ${RES}/Alignment/${element}/files/$(basename $f) -${TRIMMODE} -out ${RES}/Alignment/alignments/${element}/trim/$(basename $f | perl -pe 's/.fa/.trim/')"
              $TRIMAL -in ${RES}/Alignment/${element}/files/$(basename $f) -${TRIMMODE} -out ${RES}/Alignment/alignments/${element}/trim/$(basename $f | perl -pe 's/.fa/.trim/')
            else
              :
            fi
          else
            echo "WARN: only 1 sequence found in $f"
          fi
        else
          :
        fi
      done
    done
    if [ ${PARALOG_FILT} == 'on' ]; then
      echo "INFO: identification and filtering of paralogous sequences"
      for element in "${target[@]}";
      do
        if [ ${TRIMMING} == 'on' ]; then
          f_path=${RES}/Alignment/alignments/${element}/trim
          `dirname $0`/src/FilterParalog.py -i ${inpath} -c 0.5 -e trim -q ${CONSENSUS_LEVEL} -o ${RES}/Alignment/alignments/${element}/clean -w ${WINDOW_SIZE} -p ${WINDOW_PSITE}
        else
          f_path=${RES}/Alignment/alignments/${element}/files
          `dirname $0`/src/FilterParalog.py -i ${inpath} -c 0.5 -e fa -q ${CONSENSUS_LEVEL} -o ${RES}/Alignment/alignments/${element}/clean -w ${WINDOW_SIZE} -p ${WINDOW_PSITE}
        fi
      done
    else
      :
    fi
    echo "INFO: concatenation of alignments"
    if [ -f ${RES}/concatenated.fa ]; then
      rm ${RES}/concatenated.*
    else
      :
    fi
    alnfiles=${RES}/Alignment/alignments/
    if [ ${PARALOG_FILT} == 'on' ]; then
      echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/concatenated -t ${TAXA_ALN} --missingfract ${MISSING_RATIO} --target ${listpath} --clean -g ${GENES_TO_CONCAT}"
      `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/concatenated -t ${TAXA_ALN} --missingfract ${MISSING_RATIO} --target ${listpath} --clean -g ${GENES_TO_CONCAT}
    else
        if [ ${TRIMMING} == 'on' ]; then
          echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/concatenated -t ${TAXA_ALN} --missingfract ${MISSING_RATIO} --target ${listpath} --trim -g ${GENES_TO_CONCAT}"
          `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/concatenated -t ${TAXA_ALN} --missingfract ${MISSING_RATIO} --target ${listpath} --trim -g ${GENES_TO_CONCAT}
        else
          echo "CMD: `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/concatenated -t ${TAXA_ALN} --missingfract ${MISSING_RATIO} --target ${listpath} -g ${GENES_TO_CONCAT}"
          `dirname $0`/src/ConcatSeq.py -p ${alnfiles} --pathfind -o ${RES}/concatenated -t ${TAXA_ALN} --missingfract ${MISSING_RATIO} --target ${listpath} -g ${GENES_TO_CONCAT}
        fi
    fi
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
    exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_rRNA' ]; then
		echo "INFO: Capture of chloroplast rRNA from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/Mapping/nucrdna
    mkdir -p ${RES}/references
    start=$(date +%s)
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
			#lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_rRNA_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_rRNA_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                  if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                            echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}"
          `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_rRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_rRNA} --target ${target} -t ${SEEDS_THRESHOLD}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                  echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                fi
              else
                echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                mkdir -p ${RES}/Mapping/nucrdna
                mkdir -p ${RES}/Mapping/mitochondrion
                echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                echo "*** Extraction of close genomes ***"
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into close genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                    echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff"
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff; then
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_rRNA} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                        echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                      else
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_rRNA_done.log
                      fi
                    else
                      echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_rRNA_error.log
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_tRNA' ]; then
		echo "INFO: Capture of chloroplast tRNA from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/Mapping/nucrdna
    mkdir -p ${RES}/references
    start=$(date +%s)
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
			#lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_tRNA_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_tRNA_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_tRNA} --target ${target} -t ${SEEDS_THRESHOLD}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_tRNA} --target ${target} -t ${SEEDS_THRESHOLD}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                else
                  echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                        else
                          echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                      else
                        echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_tRNA} --target ${target} -t ${SEEDS_THRESHOLD}"
          `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_tRNA} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_tRNA} --target ${target} -t ${SEEDS_THRESHOLD}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
              else
                echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                      else
                        echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                echo "*** Extraction of close genomes ***"
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into close genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                    echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff"
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_tRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                      rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo ${lib} >> ${RES}/chloroplast_tRNA_done.log
                    else
                      echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_tRNA_error.log
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_CDS' ]; then
		echo "INFO: Capture of chloroplast CDS from assemblies"
    mkdir -p ${RES}/Extraction
		mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/Mapping/nucrdna
    mkdir -p ${RES}/references
    start=$(date +%s)
    while read f;
		do
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_CDS_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_CDS_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}"
            `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                  if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                    echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                  else
                    echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                    `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                    rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                  fi
                else
                  echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    echo "INFO: Selection of organelles contigs in $lib assemblies"
                    echo "*** Extraction of close genomes for chloroplast and mitochondrion ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                          if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                            echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                          else
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                            `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                            rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                            echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                          fi
                        else
                          echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  echo "INFO: Selection of organelles contigs in $lib assemblies"
                  echo "*** Extraction of close genomes for chloroplast and mitochondrion ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/chloroplast_CDS_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}"
          `dirname $0`/src/ExtractRef_name.py -in ${CHLORO_REF_CDS} -q ${lib} -o ${RES}/references/ -s ${SEEDS_CHLORO_CDS} --target ${target} -t ${SEEDS_THRESHOLD}
          CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
              if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                  echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                else
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                fi
              else
                echo ${lib} >> ${RES}/chloroplast_CDS_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  echo "INFO: Selection of organelles contigs in $lib assemblies"
                  echo "*** Extraction of close genomes for chloroplast and mitochondrion ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                        if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        else
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                        fi
                      else
                        echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                echo "INFO: Selection of organelles contigs in $lib assemblies"
                echo "*** Extraction of close genomes for chloroplast and mitochondrion ***"
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into close genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                    echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff"
                    if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff; then
                      if ${EXONERATE} --model protein2genome -s ${EXO_SCORE} -q ${SEEDS_MITO_CDS} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog_control.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} -clt ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta ${RES}/Mapping/chloroplast/control_seeds_${lib}.gff
                        echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                      else
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_CDS_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_CDS_done.log
                      fi
                    else
                      echo ${lib} >> ${RES}/chloroplast_CDS_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/chloroplast_CDS_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_CDS_error.log
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'capture' ] && [ $target == 'nucrdna' ]; then
    echo "INFO: Capture of rDNA from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/nucrdna
    mkdir -p ${RES}/references
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    start=$(date +%s)
    while read f;
    do
      #lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/nucrdna_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/nucrdna_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -s ${SEEDS_NRDNA} --target ${target} -t ${SEEDS_THRESHOLD}"
            `dirname $0`/src/ExtractRef_name.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -s ${SEEDS_NRDNA} --target ${target} -t ${SEEDS_THRESHOLD}
            CLOSE_REF=${RES}/references/close_${target}_sequences.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                  `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                  rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                  echo ${lib} >> ${RES}/nucrdna_done.log
                else
                  echo ${lib} >> ${RES}/nucrdna_error.log
                fi
              else
                if [ ${PLANT_MODEL} == "yes" ]; then
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/chloroplast
                      mkdir -p ${RES}/Mapping/mitochondrion
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                        ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                        ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                        ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                          echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                          echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                            echo ${lib} >> ${RES}/nucrdna_done.log
                          else
                            echo ${lib} >> ${RES}/nucrdna_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                          echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                    if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                      echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    else
                      mkdir -p ${RES}/Mapping/mitochondrion
                      echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                      echo "*** Extraction of close genomes ***"
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                      echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                      `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                      CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                      CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                      if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                        echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                        echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                        ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                        echo "*** Mapping of contigs into close genomes ***"
                        echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                        ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                        echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                        ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                        if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                          `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                        elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                          awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        else
                          echo "WARN: error in selection of contigs for ${lib}"
                          echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                          continue
                        fi
                        rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                        if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                          echo "*** mapping and extraction of assemblies into reference ***"
                          awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                          if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                            echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                            `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                            rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                            echo ${lib} >> ${RES}/nucrdna_done.log
                          else
                            echo ${lib} >> ${RES}/nucrdna_error.log
                          fi
                        else
                          echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                          echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                          continue
                        fi
                      else
                        echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                    fi
                  else
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/nucrdna_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
          echo "CMD: `dirname $0`/src/ExtractRef_name.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -s ${SEEDS_NRDNA} --target ${target} -t ${SEEDS_THRESHOLD}"
          `dirname $0`/src/ExtractRef_name.py -in ${NRDNA_REF} -q ${lib} -o ${RES}/references/ -s ${SEEDS_NRDNA} --target ${target} -t ${SEEDS_THRESHOLD}
          CLOSE_REF=${RES}/references/close_${target}_sequences.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                echo ${lib} >> ${RES}/nucrdna_done.log
              else
                echo ${lib} >> ${RES}/nucrdna_error.log
              fi
            else
              if [ ${PLANT_MODEL} == "yes" ]; then
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/chloroplast
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/chloroplast
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo ${lib} >> ${RES}/nucrdna_done.log
                      else
                        echo ${lib} >> ${RES}/nucrdna_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not nuclear ribosomal contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                      ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                      ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                          `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                          rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                          echo ${lib} >> ${RES}/nucrdna_done.log
                        else
                          echo ${lib} >> ${RES}/nucrdna_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                        echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info - > ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}"
                        `dirname $0`/src/ExoGFF_homolog_nucrdna.py -i ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta -g ${RES}/Mapping/nucrdna/out_rRNA_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${NRDNA_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT}
                        rm ${RES}/Mapping/nucrdna/contigs_nucrdna_${lib}.fasta
                        echo ${lib} >> ${RES}/nucrdna_done.log
                      else
                        echo ${lib} >> ${RES}/nucrdna_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into nuclear ribosomal genomes"
                      echo ${lib} >> ${RES}/Mapping/nucrdna_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/nucrdna_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/nucrdna_error.log
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
    exit 0

  elif [ $mode == 'capture' ] && [ $target == 'chloroplast_nt' ]; then
		echo "INFO: Free-mode of cpDNA sequence capture from assemblies"
    mkdir -p ${RES}/Extraction
    mkdir -p ${RES}/Mapping/chloroplast
    mkdir -p ${RES}/Mapping/mitochondrion
    mkdir -p ${RES}/Mapping/nucrdna
    mkdir -p ${RES}/references
    start=$(date +%s)
    #for f in `find ${RES}/Assembly/Samples/ -type f -name \*.fa`;
    while read f;
		do
			#lib=`basename $f | perl -pe 's/\.fa//'`
      lib=`echo ${f} | awk '{print $1}'`
      file=${RES}/Assembly/Samples/filtered/${lib}.fa
      if [ -s $file ]; then
        if [ -s ${RES}/chloroplast_nt_done.log ]; then
          if grep -Fxq "${lib}" ${RES}/chloroplast_nt_done.log; then
            echo "WARN: $lib already processed"
            continue
          else
            echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${CHLORO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${CHLORO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}
            CLOSE_REF=${RES}/references/close_${target}.fa
            if [ -s ${CLOSE_REF} ]; then
              if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                echo "*** mapping and extraction of assemblies into reference ***"
                awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff"
                if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff; then
                  echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                  `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                  rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                  echo ${lib} >> ${RES}/chloroplast_nt_done.log
                else
                  echo ${lib} >> ${RES}/chloroplast_nt_error.log
                fi
              else
                if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                  if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                    echo "WARN: $lib has not chloroplastic contigs into assemblies"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  else
                    mkdir -p ${RES}/Mapping/nucrdna
                    mkdir -p ${RES}/Mapping/mitochondrion
                    echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                    echo "*** Extraction of close genomes ***"
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                    echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                    `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                    CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                    CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                    CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                    if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                      echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                      echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                      ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                      echo "*** Mapping of contigs into close genomes ***"
                      echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                			${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                			${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                      echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                			${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                      if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                        `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                        echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                        echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                        awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                        echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                      else
                        echo "WARN: error in selection of contigs for ${lib}"
                        echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                        continue
                      fi
                      rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                      if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                        echo "*** mapping and extraction of assemblies into reference ***"
                        awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff"
                        if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff; then
                          echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                          `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                          rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                          echo ${lib} >> ${RES}/chloroplast_nt_done.log
                        else
                          echo ${lib} >> ${RES}/chloroplast_nt_error.log
                        fi
                      else
                        echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                        echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                        continue
                      fi
                    else
                      echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                  fi
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_nt_done.log
                      else
                        echo ${lib} >> ${RES}/chloroplast_nt_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              fi
            else
              echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
              echo ${lib} >> ${RES}/chloroplast_nt_error.log
              continue
            fi
          fi
        else
          echo "*** make formatted reference on the closest taxa from the database ***"
            echo "CMD: `dirname $0`/src/ExtractRef_nucluce.py -in ${CHLORO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}"
            `dirname $0`/src/ExtractRef_nucluce.py -in ${CHLORO_REF_NT} -q ${lib} -o ${RES}/references/ --target ${target}
            CLOSE_REF=${RES}/references/close_${target}.fa
          if [ -s ${CLOSE_REF} ]; then
            if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
              echo "*** mapping and extraction of assemblies into reference ***"
              awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
              echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff"
              if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff; then
                echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                echo ${lib} >> ${RES}/chloroplast_nt_done.log
              else
                echo ${lib} >> ${RES}/chloroplast_nt_error.log
              fi
            else
              if [ -s ${RES}/Mapping/selection_contigs_done.log ]; then
                if grep -Fxq "${lib}" ${RES}/Mapping/selection_contigs_done.log; then
                  echo "WARN: $lib has not chloroplastic contigs into assemblies"
                  echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                  continue
                else
                  mkdir -p ${RES}/Mapping/nucrdna
                  mkdir -p ${RES}/Mapping/mitochondrion
                  echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                  echo "*** Extraction of close genomes ***"
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                  echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                  `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                  CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                  CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                  CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                  if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                    echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                    echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                    ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                    echo "*** Mapping of contigs into close genomes ***"
                    echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                    ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                    echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                    ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                    if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                      `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                      echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                      echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                      awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                      echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                    else
                      echo "WARN: error in selection of contigs for ${lib}"
                      echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                      continue
                    fi
                    rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                    if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                      echo "*** mapping and extraction of assemblies into reference ***"
                      awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff"
                      if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff; then
                        echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                        `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                        rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                        echo ${lib} >> ${RES}/chloroplast_nt_done.log
                      else
                        echo ${lib} >> ${RES}/chloroplast_nt_error.log
                      fi
                    else
                      echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                      echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                      continue
                    fi
                  else
                    echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                fi
              else
                mkdir -p ${RES}/Mapping/nucrdna
                mkdir -p ${RES}/Mapping/mitochondrion
                echo "INFO: Selection of contigs in $lib assemblies according to mitochondrial, chloroplastic and ribosomal origin"
                echo "*** Extraction of close genomes ***"
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${CHLORO_ANNOTATIONS} --compartment chloroplast -fmt ${CHLORO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${CHLORO_SIZE_MIN} -M ${CHLORO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${MITO_ANNOTATIONS} --compartment mitochondrion -fmt ${MITO_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${MITO_SIZE_MIN} -M ${MITO_SIZE_MAX}
                echo "CMD: `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}"
                `dirname $0`/src/ExtractGenome.py -in ${NRDNA_ANNOTATIONS} --compartment nucrdna -fmt ${NRDNA_DB_FMT} -q ${lib} -o ${RES}/references/ -m ${NRDNA_SIZE_MIN} -M ${NRDNA_SIZE_MAX}
                CLOSE_CHLORO_GENOME=${RES}/references/close_chloroplast.fa
                CLOSE_MITO_GENOME=${RES}/references/close_mitochondrion.fa
                CLOSE_GENOME=${RES}/references/close_nucrdna.fa
                if [ -s ${CLOSE_CHLORO_GENOME} ] && [ -s ${CLOSE_MITO_GENOME} ] && [ -s ${CLOSE_GENOME} ]; then
                  echo "CMD: ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_CHLORO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_MITO_GENOME} -dbtype nucl
                  echo "CMD: ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl"
                  ${BLASTDB} -in ${CLOSE_GENOME} -dbtype nucl
                  echo "*** Mapping of contigs into close genomes ***"
                  echo "CMD: ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_CHLORO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}"
                  ${BLASTN} -db ${CLOSE_MITO_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib}
                  echo "CMD: ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split(\$1,a,\"_\")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}"
                  ${BLASTN} -db ${CLOSE_GENOME} -query $file -evalue ${EVALUE} -num_threads ${THREADS} -outfmt 7 -task blastn | awk '!/^#/ {print}' | awk -v COV=${COVERAGE} -v MLEN=${MINCONTLENGTH} '{split($1,a,"_")}{if(a[6]>=COV && a[4]>=MLEN) print}' > ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib}
                  if [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-mito-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_organelles.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ] && [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_chloro-rdna.py --chloro ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --out_chloro ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ] && [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    echo "CMD: `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info"
                    `dirname $0`/src/SelectContigs_mitordna.py --rdna ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} --mito ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} --out_rdna ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info --out_mito ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} | sort | uniq > ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info
                    echo "WARN: no mtDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} | sort | uniq > ${RES}/Mapping/nucrdna/${lib}.contigs_nucrdna.info
                    echo "WARN: no mtDNA and cpDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  elif [ -s ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ]; then
                    awk '{print $1}' ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} | sort | uniq > ${RES}/Mapping/mitochondrion/${lib}.contigs_mito.info
                    echo "WARN: no cpDNA and rDNA contigs found for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_done.log
                  else
                    echo "WARN: error in selection of contigs for ${lib}"
                    echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                    continue
                  fi
                  rm ${RES}/Mapping/chloroplast/matches_chlorogenome_${lib} ${RES}/Mapping/mitochondrion/matches_mitogenome_${lib} ${RES}/Mapping/nucrdna/matches_nucrdnagenome_${lib} ${CLOSE_CHLORO_GENOME} ${CLOSE_MITO_GENOME} ${CLOSE_GENOME} ${CLOSE_CHLORO_GENOME}.* ${CLOSE_MITO_GENOME}.* ${CLOSE_GENOME}.*
                  if [ -s ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info ]; then
                    echo "*** mapping and extraction of assemblies into reference ***"
                    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $file | perl -pe 's@>@@' | awk ' NR==FNR {a[$1]=$1;next} {if($1 in a) {print ">"$1"\n"$NF}}' ${RES}/Mapping/chloroplast/${lib}.contigs_chloro.info - > ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                    echo "CMD: ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print \$0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=\$0;next;}{entry = entry \"\n\" \$0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff"
                    if ${EXONERATE} --model genome2genome -s ${EXO_SCORE} -q ${CLOSE_REF} -t ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta --showquerygff yes --showtargetgff yes --showvulgar no --showcigar no --showalignment no | awk '!/^Hostname:|^Command line:|^-- completed exonerate analysis|#/ {print $0}' | awk '/Target/ { if (ok) print entry; ok=1;entry=$0;next;}{entry = entry "\n" $0;}/intron\t-/{ok=0;}END{if (ok) print entry;}' > ${RES}/Mapping/chloroplast/out_nt_${lib}.gff; then
                      echo "CMD: `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}"
                      `dirname $0`/src/ExoGFF_homolog.py -i ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta -g ${RES}/Mapping/chloroplast/out_nt_${lib}.gff -m ${target} -o ${RES}/Extraction/ -n ${lib} -l ${MINLENGTH} -t ${CHLORO_TYPE} -c ${COVERAGE} -cl ${MINCONTLENGTH} --threads ${THREADS} -s ${CLOSE_REF} -rp ${REFPCT} --cov_cutoff ${COVCUTOFF} --orfcov ${ORFCOV} --genetic_code ${GENETIC_CODE}
                      rm ${RES}/Mapping/chloroplast/contigs_chloro_${lib}.fasta
                      echo ${lib} >> ${RES}/chloroplast_nt_done.log
                    else
                      echo ${lib} >> ${RES}/chloroplast_nt_error.log
                    fi
                  else
                    echo "WARN: No hits were detected when mapping ${lib} into chloroplastic genomes"
                    echo ${lib} >> ${RES}/Mapping/chloroplast_contig_errors.log
                    continue
                  fi
                else
                  echo "WARN: error in selection of contigs into close related genomes for ${lib}"
                  echo ${lib} >> ${RES}/Mapping/selection_contigs_errors.log
                  continue
                fi
              fi
            fi
          else
            echo "WARN: error to extract close sequences into ${CLOSE_REF} database"
            echo ${lib} >> ${RES}/chloroplast_nt_error.log
            continue
          fi
        fi
      else
        echo "no assemblies done for $lib"
        echo ${lib} >> ${RES}/chloroplast_nt_error.log
      fi
    done <${SAMPLES}
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
		echo "STATUS: done"
    echo ""
		exit 0

  elif [ $mode == 'checking' ]; then

    echo "INFO: Checking of captured genes by mapping into NCBI database"
    listbarcodes=`echo ${BARCODES[@]} | perl -pe 's/ /,/g'`
    start=$(date +%s)
    if [ ! -d "${RES}/Errors" ]; then
      mkdir ${RES}/Errors
    else
      echo "Directory ${RES}/Errors exists."
    fi
    for element in "${BARCODES[@]}"; do
      echo "INFO: blast of $element into NCBI database"
      if [ ${DB_LOCAL} == 'on' ]; then
        echo "CMD: ${BLASTN} -db ${BLAST_NT_DB} -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs ${MAX_SEQS} -outfmt "6 qseqid sacc score pident qcovs staxids" -evalue 1e-5 -num_threads ${THREADS} -best_hit_overhang 0.1 -best_hit_score_edge 0.1"
        ${BLASTN} -db ${BLAST_NT_DB} -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs ${MAX_SEQS} -outfmt "6 qseqid sacc score pident qcovs staxids" -evalue 1e-5 -num_threads ${THREADS} -best_hit_overhang 0.1 -best_hit_score_edge 0.1
      else
        echo "CMD: ${BLASTN} -db nt -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs ${MAX_SEQS} -outfmt "6 qseqid sacc score pident qcovs staxids" -evalue 1e-5 -best_hit_overhang 0.1 -best_hit_score_edge 0.1 -remote"
        ${BLASTN} -db nt -query ${RES}/Extraction/${BARCODES_TYPE}/${element}.fa -out ${RES}/Errors/blast_${element}.out -max_target_seqs ${MAX_SEQS} -outfmt "6 qseqid sacc score pident qcovs staxids" -evalue 1e-5 -best_hit_overhang 0.1 -best_hit_score_edge 0.1 -remote
      fi
    done
    echo "INFO: selection of best hits accession for $listbarcodes blast"
    echo "CMD: `dirname $0`/src/BestHits.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXA_CHECK}"
    `dirname $0`/src/BestHits.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXA_CHECK}

    echo "INFO: taxids comparison at the family level between query and best hits sequences"
    if [ ${FAMILIES_LOCAL} == 'on' ]; then
      echo "CMD: `dirname $0`/src/TaxIDCompare_missingtaxid.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXA_CHECK} --families ${CORRESPONDING_FAMILIES} --local > ${RES}/Errors/ValidationSamples.out"
      `dirname $0`/src/TaxIDCompare_missingtaxid.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXA_CHECK} --families ${CORRESPONDING_FAMILIES} --local > ${RES}/Errors/ValidationSamples.out
    else
      echo "CMD: `dirname $0`/src/TaxIDCompare_missingtaxid.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXA_CHECK} > ${RES}/Errors/ValidationSamples.out"
      `dirname $0`/src/TaxIDCompare_missingtaxid.py -o ${RES}/Errors/ -b $listbarcodes -t ${TAXA_CHECK} > ${RES}/Errors/ValidationSamples.out
    fi
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    hours=$((runtime / 3600))
    minutes=$(( (runtime % 3600) / 60 ))
    seconds=$(( (runtime % 3600) % 60 ))
    echo "INFO: time ellapsed for $mode step: $hours:$minutes:$seconds (hh:mm:ss)"
    echo "STATUS: done"
    echo ""
    exit 0

	fi

exit 0
